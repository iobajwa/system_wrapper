<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SystemWrapper</name>
    </assembly>
    <members>
        <member name="T:SystemWrapper.Microsoft.Win32.SafeHandles.SafeRegistryHandleWrap">
            <summary>
            SafeRegistryHandleWrap should be used instead of SafeRegistryHandle
            and implements ISafeRegistryHandle
            </summary>
        </member>
        <member name="M:SystemWrapper.Microsoft.Win32.SafeHandles.SafeRegistryHandleWrap.#ctor(Microsoft.Win32.SafeHandles.SafeRegistryHandle)">
            <summary>
            The constructor
            </summary>
            <param name="safeRegistryHandle"></param>
        </member>
        <member name="M:SystemWrapper.Microsoft.Win32.SafeHandles.SafeRegistryHandleWrap.Dispose">
            <summary>
            The dispose method
            </summary>
        </member>
        <member name="M:SystemWrapper.Microsoft.Win32.SafeHandles.SafeRegistryHandleWrap.Close">
            <summary>
            
            </summary>
        </member>
        <member name="M:SystemWrapper.Microsoft.Win32.SafeHandles.SafeRegistryHandleWrap.DangerousAddRef(System.Boolean@)">
            <summary>
            
            </summary>
            <param name="success"></param>
        </member>
        <member name="M:SystemWrapper.Microsoft.Win32.SafeHandles.SafeRegistryHandleWrap.DangerousGetHandle">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:SystemWrapper.Microsoft.Win32.SafeHandles.SafeRegistryHandleWrap.DangerousRelease">
            <summary>
            
            </summary>
        </member>
        <member name="M:SystemWrapper.Microsoft.Win32.SafeHandles.SafeRegistryHandleWrap.SetHandleAsInvalid">
            <summary>
            
            </summary>
        </member>
        <member name="P:SystemWrapper.Microsoft.Win32.SafeHandles.SafeRegistryHandleWrap.IsClosed">
            <summary>
            
            </summary>
        </member>
        <member name="P:SystemWrapper.Microsoft.Win32.SafeHandles.SafeRegistryHandleWrap.IsInvalid">
            <summary>
            
            </summary>
        </member>
        <member name="P:SystemWrapper.Microsoft.Win32.SafeHandles.SafeRegistryHandleWrap.SafeRegistryHandleInstance">
            <summary>
            
            </summary>
        </member>
        <member name="T:SystemWrapper.IO.DirectoryInfoWrap">
            <summary>
            Wrapper for <see cref="T:System.IO.DirectoryInfo"/> class.
            </summary>
        </member>
        <member name="M:SystemWrapper.IO.DirectoryInfoWrap.#ctor(System.IO.DirectoryInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:SystemWrapper.IO.DirectoryInfoWrap"/> class on the specified path. 
            </summary>
            <param name="directoryInfo">A <see cref="T:System.IO.DirectoryInfo"/> object.</param>
        </member>
        <member name="M:SystemWrapper.IO.DirectoryInfoWrap.Initialize(System.IO.DirectoryInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:SystemWrapper.IO.DirectoryInfoWrap"/> class on the specified path. 
            </summary>
            <param name="directoryInfo">A <see cref="T:System.IO.DirectoryInfo"/> object.</param>
        </member>
        <member name="M:SystemWrapper.IO.DirectoryInfoWrap.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SystemWrapper.IO.DirectoryInfoWrap"/> class on the specified path. 
            </summary>
            <param name="path">A string specifying the path on which to create the <see cref="T:SystemWrapper.IO.DirectoryInfoWrap"/>. </param>
        </member>
        <member name="M:SystemWrapper.IO.DirectoryInfoWrap.Initialize(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SystemWrapper.IO.DirectoryInfoWrap"/> class on the specified path. 
            </summary>
            <param name="path">A string specifying the path on which to create the <see cref="T:SystemWrapper.IO.DirectoryInfoWrap"/>. </param>
        </member>
        <member name="M:SystemWrapper.IO.DirectoryInfoWrap.Create">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.DirectoryInfoWrap.Create(SystemInterface.Security.AccessControl.IDirectorySecurity)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.DirectoryInfoWrap.CreateObjRef(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.DirectoryInfoWrap.CreateSubdirectory(System.String)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.DirectoryInfoWrap.CreateSubdirectory(System.String,SystemInterface.Security.AccessControl.IDirectorySecurity)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.DirectoryInfoWrap.Delete">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.DirectoryInfoWrap.Delete(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.DirectoryInfoWrap.GetAccessControl">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.DirectoryInfoWrap.GetAccessControl(System.Security.AccessControl.AccessControlSections)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.DirectoryInfoWrap.GetDirectories">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.DirectoryInfoWrap.GetDirectories(System.String)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.DirectoryInfoWrap.GetDirectories(System.String,System.IO.SearchOption)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.DirectoryInfoWrap.GetFiles">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.DirectoryInfoWrap.GetFiles(System.String)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.DirectoryInfoWrap.GetFiles(System.String,System.IO.SearchOption)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.DirectoryInfoWrap.GetFileSystemInfos">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.DirectoryInfoWrap.GetFileSystemInfos(System.String)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.DirectoryInfoWrap.GetLifetimeService">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.DirectoryInfoWrap.InitializeLifetimeService">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.DirectoryInfoWrap.MoveTo(System.String)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.DirectoryInfoWrap.Refresh">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.DirectoryInfoWrap.SetAccessControl(SystemInterface.Security.AccessControl.IDirectorySecurity)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.DirectoryInfoWrap.ToString">
            <inheritdoc />
        </member>
        <member name="P:SystemWrapper.IO.DirectoryInfoWrap.Attributes">
            <inheritdoc />
        </member>
        <member name="P:SystemWrapper.IO.DirectoryInfoWrap.CreationTime">
            <inheritdoc />
        </member>
        <member name="P:SystemWrapper.IO.DirectoryInfoWrap.CreationTimeUtc">
            <inheritdoc />
        </member>
        <member name="P:SystemWrapper.IO.DirectoryInfoWrap.DirectoryInfo">
            <inheritdoc />
        </member>
        <member name="P:SystemWrapper.IO.DirectoryInfoWrap.Exists">
            <inheritdoc />
        </member>
        <member name="P:SystemWrapper.IO.DirectoryInfoWrap.Extension">
            <inheritdoc />
        </member>
        <member name="P:SystemWrapper.IO.DirectoryInfoWrap.FullName">
            <inheritdoc />
        </member>
        <member name="P:SystemWrapper.IO.DirectoryInfoWrap.LastAccessTime">
            <inheritdoc />
        </member>
        <member name="P:SystemWrapper.IO.DirectoryInfoWrap.LastAccessTimeUtc">
            <inheritdoc />
        </member>
        <member name="P:SystemWrapper.IO.DirectoryInfoWrap.LastWriteTime">
            <inheritdoc />
        </member>
        <member name="P:SystemWrapper.IO.DirectoryInfoWrap.LastWriteTimeUtc">
            <inheritdoc />
        </member>
        <member name="P:SystemWrapper.IO.DirectoryInfoWrap.Name">
            <inheritdoc />
        </member>
        <member name="P:SystemWrapper.IO.DirectoryInfoWrap.Parent">
            <inheritdoc />
        </member>
        <member name="P:SystemWrapper.IO.DirectoryInfoWrap.Root">
            <inheritdoc />	
        </member>
        <member name="T:SystemWrapper.Reflection.AssemblyWrap">
            <summary>
            Wrapper for <see cref="T:System.Reflection.Assembly"/> class.
            </summary>
        </member>
        <member name="M:SystemWrapper.Reflection.AssemblyWrap.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SystemWrapper.Reflection.AssemblyWrap"/> class. 
            </summary>
        </member>
        <member name="M:SystemWrapper.Reflection.AssemblyWrap.#ctor(System.Reflection.Assembly)">
            <summary>
            Initializes a new instance of the <see cref="T:SystemWrapper.Reflection.AssemblyWrap"/> class. 
            </summary>
            <param name="assembly">Assembly object.</param>
        </member>
        <member name="M:SystemWrapper.Reflection.AssemblyWrap.Initialize(System.Reflection.Assembly)">
            <summary>
            Initializes a new instance of the <see cref="T:SystemWrapper.Reflection.AssemblyWrap"/> class. 
            </summary>
            <param name="assembly">Assembly object.</param>
        </member>
        <member name="M:SystemWrapper.Reflection.AssemblyWrap.CreateInstance(System.String)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.Reflection.AssemblyWrap.CreateInstance(System.String,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.Reflection.AssemblyWrap.CreateInstance(System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.Reflection.AssemblyWrap.CreateQualifiedName(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.Reflection.AssemblyWrap.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.Reflection.AssemblyWrap.GetAssembly(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.Reflection.AssemblyWrap.GetCallingAssembly">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.Reflection.AssemblyWrap.GetCustomAttributes(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.Reflection.AssemblyWrap.GetCustomAttributes(System.Type,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.Reflection.AssemblyWrap.GetEntryAssembly">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.Reflection.AssemblyWrap.GetExecutingAssembly">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.Reflection.AssemblyWrap.GetExportedTypes">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.Reflection.AssemblyWrap.GetFile(System.String)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.Reflection.AssemblyWrap.GetFiles">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.Reflection.AssemblyWrap.GetFiles(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.Reflection.AssemblyWrap.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.Reflection.AssemblyWrap.GetName">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.Reflection.AssemblyWrap.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.Reflection.AssemblyWrap.GetReferencedAssemblies">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.Reflection.AssemblyWrap.IsDefined(System.Type,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.Reflection.AssemblyWrap.LoadFrom(System.String)">
            <inheritdoc />
        </member>
        <member name="P:SystemWrapper.Reflection.AssemblyWrap.AssemblyInstance">
            <inheritdoc />
        </member>
        <member name="P:SystemWrapper.Reflection.AssemblyWrap.CodeBase">
            <inheritdoc />
        </member>
        <member name="P:SystemWrapper.Reflection.AssemblyWrap.EntryPoint">
            <inheritdoc />
        </member>
        <member name="P:SystemWrapper.Reflection.AssemblyWrap.EscapedCodeBase">
            <inheritdoc />
        </member>
        <member name="P:SystemWrapper.Reflection.AssemblyWrap.Evidence">
            <inheritdoc />
        </member>
        <member name="P:SystemWrapper.Reflection.AssemblyWrap.FullName">
            <inheritdoc />
        </member>
        <member name="P:SystemWrapper.Reflection.AssemblyWrap.GlobalAssemblyCache">
            <inheritdoc />
        </member>
        <member name="P:SystemWrapper.Reflection.AssemblyWrap.HostContext">
            <inheritdoc />
        </member>
        <member name="P:SystemWrapper.Reflection.AssemblyWrap.ImageRuntimeVersion">
            <inheritdoc />
        </member>
        <member name="P:SystemWrapper.Reflection.AssemblyWrap.Location">
            <inheritdoc />
        </member>
        <member name="P:SystemWrapper.Reflection.AssemblyWrap.ManifestModule">
            <inheritdoc />
        </member>
        <member name="P:SystemWrapper.Reflection.AssemblyWrap.ReflectionOnly">
            <inheritdoc />
        </member>
        <member name="T:SystemWrapper.Configuration.ConfigurationManagerWrap">
            <summary>
            Wrapper for <see cref="T:System.Configuration.ConfigurationManager"/> class.
            </summary>
        </member>
        <member name="M:SystemWrapper.Configuration.ConfigurationManagerWrap.GetSection(System.String)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.Configuration.ConfigurationManagerWrap.OpenExeConfiguration(System.String)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.Configuration.ConfigurationManagerWrap.OpenExeConfiguration(System.Configuration.ConfigurationUserLevel)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.Configuration.ConfigurationManagerWrap.OpenMachineConfiguration">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.Configuration.ConfigurationManagerWrap.OpenMappedExeConfiguration(System.Configuration.ExeConfigurationFileMap,System.Configuration.ConfigurationUserLevel)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.Configuration.ConfigurationManagerWrap.OpenMappedMachineConfiguration(System.Configuration.ConfigurationFileMap)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.Configuration.ConfigurationManagerWrap.RefreshSection(System.String)">
            <inheritdoc />
        </member>
        <member name="P:SystemWrapper.Configuration.ConfigurationManagerWrap.AppSettings">
            <inheritdoc />
        </member>
        <member name="P:SystemWrapper.Configuration.ConfigurationManagerWrap.ConnectionStrings">
            <inheritdoc />
        </member>
        <member name="T:SystemWrapper.IO.MemoryStreamWrap">
            <summary>
            Wrapper for <see cref="T:System.IO.MemoryStream"/> class.
            </summary>
        </member>
        <member name="M:SystemWrapper.IO.MemoryStreamWrap.#ctor">
            <summary>
            Initializes a new instance of the MemoryStreamWrap class with an expandable capacity initialized to zero. 
            </summary>
        </member>
        <member name="M:SystemWrapper.IO.MemoryStreamWrap.Initialize">
            <summary>
            Initializes a new instance of the MemoryStreamWrap class with an expandable capacity initialized to zero. 
            </summary>
        </member>
        <member name="M:SystemWrapper.IO.MemoryStreamWrap.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the MemoryStreamWrap class with an expandable capacity initialized to zero. 
            </summary>
        </member>
        <member name="M:SystemWrapper.IO.MemoryStreamWrap.Initialize(System.IO.Stream)">
            <summary>
            Initializes a new instance of the MemoryStreamWrap class with an expandable capacity initialized to zero. 
            </summary>
        </member>
        <member name="M:SystemWrapper.IO.MemoryStreamWrap.#ctor(System.IO.MemoryStream)">
            <summary>
            Initializes a new instance of the <see cref="T:SystemWrapper.IO.MemoryStreamWrap"/> class on the specified path. 
            </summary>
            <param name="memoryStream">A <see cref="T:System.IO.MemoryStream"/> object.</param>
        </member>
        <member name="M:SystemWrapper.IO.MemoryStreamWrap.Initialize(System.IO.MemoryStream)">
            <summary>
            Initializes a new instance of the <see cref="T:SystemWrapper.IO.MemoryStreamWrap"/> class on the specified path. 
            </summary>
            <param name="memoryStream">A <see cref="T:System.IO.MemoryStream"/> object.</param>
        </member>
        <member name="M:SystemWrapper.IO.MemoryStreamWrap.#ctor(System.Byte[])">
            <summary>
            Initializes a new non-resizable instance of the MemoryStreamWrap class based on the specified byte array. 
            </summary>
            <param name="buffer">The array of unsigned bytes from which to create the current stream. </param>
        </member>
        <member name="M:SystemWrapper.IO.MemoryStreamWrap.Initialize(System.Byte[])">
            <summary>
            Initializes a new non-resizable instance of the MemoryStreamWrap class based on the specified byte array. 
            </summary>
            <param name="buffer">The array of unsigned bytes from which to create the current stream. </param>
        </member>
        <member name="M:SystemWrapper.IO.MemoryStreamWrap.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the MemoryStreamWrap class with an expandable capacity initialized as specified. 
            </summary>
            <param name="capacity"></param>
        </member>
        <member name="M:SystemWrapper.IO.MemoryStreamWrap.Initialize(System.Int32)">
            <summary>
            Initializes a new instance of the MemoryStreamWrap class with an expandable capacity initialized as specified. 
            </summary>
            <param name="capacity"></param>
        </member>
        <member name="M:SystemWrapper.IO.MemoryStreamWrap.#ctor(System.Byte[],System.Boolean)">
            <summary>
            Initializes a new non-resizable instance of the MemoryStreamWrap class based on the specified byte array with the CanWrite property set as specified. 
            </summary>
            <param name="buffer">The array of unsigned bytes from which to create this stream. </param>
            <param name="writable">The setting of the CanWrite property, which determines whether the stream supports writing. </param>
        </member>
        <member name="M:SystemWrapper.IO.MemoryStreamWrap.Initialize(System.Byte[],System.Boolean)">
            <summary>
            Initializes a new non-resizable instance of the MemoryStreamWrap class based on the specified byte array with the CanWrite property set as specified. 
            </summary>
            <param name="buffer">The array of unsigned bytes from which to create this stream. </param>
            <param name="writable">The setting of the CanWrite property, which determines whether the stream supports writing. </param>
        </member>
        <member name="M:SystemWrapper.IO.MemoryStreamWrap.#ctor(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Initializes a new non-resizable instance of the MemoryStreamWrap class based on the specified region (index) of a byte array. 
            </summary>
            <param name="buffer">The array of unsigned bytes from which to create this stream. </param>
            <param name="index">The index into buffer at which the stream begins.</param>
            <param name="count">The length of the stream in bytes. </param>
        </member>
        <member name="M:SystemWrapper.IO.MemoryStreamWrap.Initialize(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Initializes a new non-resizable instance of the MemoryStreamWrap class based on the specified region (index) of a byte array. 
            </summary>
            <param name="buffer">The array of unsigned bytes from which to create this stream. </param>
            <param name="index">The index into buffer at which the stream begins.</param>
            <param name="count">The length of the stream in bytes. </param>
        </member>
        <member name="M:SystemWrapper.IO.MemoryStreamWrap.#ctor(System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            Initializes a new non-resizable instance of the MemoryStreamWrap class based on the specified region of a byte array, with the CanWrite property set as specified. 
            </summary>
            <param name="buffer">The array of unsigned bytes from which to create this stream. </param>
            <param name="index">The index into buffer at which the stream begins.</param>
            <param name="count">The length of the stream in bytes. </param>
            <param name="writable">The setting of the CanWrite property, which determines whether the stream supports writing. </param>
        </member>
        <member name="M:SystemWrapper.IO.MemoryStreamWrap.Initialize(System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            Initializes a new non-resizable instance of the MemoryStreamWrap class based on the specified region of a byte array, with the CanWrite property set as specified. 
            </summary>
            <param name="buffer">The array of unsigned bytes from which to create this stream. </param>
            <param name="index">The index into buffer at which the stream begins.</param>
            <param name="count">The length of the stream in bytes. </param>
            <param name="writable">The setting of the CanWrite property, which determines whether the stream supports writing. </param>
        </member>
        <member name="M:SystemWrapper.IO.MemoryStreamWrap.#ctor(System.Byte[],System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the MemoryStreamWrap class based on the specified region of a byte array, with the CanWrite property set as specified, and the ability to call GetBuffer set as specified. 
            </summary>
            <param name="buffer">The array of unsigned bytes from which to create this stream. </param>
            <param name="index">The index into buffer at which the stream begins.</param>
            <param name="count">The length of the stream in bytes.</param>
            <param name="writable">The setting of the CanWrite property, which determines whether the stream supports writing. </param>
            <param name="publiclyVisible"> true to enable GetBuffer, which returns the unsigned byte array from which the stream was created; otherwise, false. </param>
        </member>
        <member name="M:SystemWrapper.IO.MemoryStreamWrap.Initialize(System.Byte[],System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the MemoryStreamWrap class based on the specified region of a byte array, with the CanWrite property set as specified, and the ability to call GetBuffer set as specified. 
            </summary>
            <param name="buffer">The array of unsigned bytes from which to create this stream. </param>
            <param name="index">The index into buffer at which the stream begins.</param>
            <param name="count">The length of the stream in bytes.</param>
            <param name="writable">The setting of the CanWrite property, which determines whether the stream supports writing. </param>
            <param name="publiclyVisible"> true to enable GetBuffer, which returns the unsigned byte array from which the stream was created; otherwise, false. </param>
        </member>
        <member name="M:SystemWrapper.IO.MemoryStreamWrap.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.MemoryStreamWrap.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.MemoryStreamWrap.Close">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.MemoryStreamWrap.EndRead(System.IAsyncResult)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.MemoryStreamWrap.EndWrite(System.IAsyncResult)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.MemoryStreamWrap.Flush">
            <summary>
            Overrides Stream.Flush so that no action is performed. 
            </summary>
        </member>
        <member name="M:SystemWrapper.IO.MemoryStreamWrap.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a block of bytes from the current stream and writes the data to buffer. 
            </summary>
            <param name="buffer">When this method returns, contains the specified byte array with the values between offset and (offset + count - 1) replaced by the characters read from the current stream. </param>
            <param name="offset">The byte offset in buffer at which to begin reading.</param>
            <param name="count">The maximum number of bytes to read. </param>
            <returns>The total number of bytes written into the buffer. This can be less than the number of bytes requested if that number of bytes are not currently available, or zero if the end of the stream is reached before any bytes are read. </returns>
        </member>
        <member name="M:SystemWrapper.IO.MemoryStreamWrap.ReadByte">
            <summary>
            Reads a byte from the current stream. 
            </summary>
            <returns>The byte cast to a Int32, or -1 if the end of the stream has been reached.</returns>
        </member>
        <member name="M:SystemWrapper.IO.MemoryStreamWrap.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the position within the current stream to the specified value. 
            </summary>
            <param name="offset">The new position within the stream. This is relative to the loc parameter, and can be positive or negative. </param>
            <param name="origin">A value of type SeekOrigin, which acts as the seek reference point. </param>
            <returns>The new position within the stream, calculated by combining the initial reference point and the offset.</returns>
        </member>
        <member name="M:SystemWrapper.IO.MemoryStreamWrap.SetLength(System.Int64)">
            <summary>
            Sets the length of the current stream to the specified value. 
            </summary>
            <param name="value">The value at which to set the length.</param>
        </member>
        <member name="M:SystemWrapper.IO.MemoryStreamWrap.Synchronized(SystemInterface.IO.IStream)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.MemoryStreamWrap.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a block of bytes to the current stream using data read from buffer. 
            </summary>
            <param name="buffer">The buffer to write data from. </param>
            <param name="offset">The byte offset in buffer at which to begin writing from. </param>
            <param name="count">The maximum number of bytes to write. </param>
        </member>
        <member name="M:SystemWrapper.IO.MemoryStreamWrap.WriteByte(System.Byte)">
            <summary>
            Writes a byte to the current stream at the current position. 
            </summary>
            <param name="value">The byte to write. </param>
        </member>
        <member name="M:SystemWrapper.IO.MemoryStreamWrap.GetBuffer">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.MemoryStreamWrap.ToArray">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.MemoryStreamWrap.WriteTo(SystemInterface.IO.IStream)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.MemoryStreamWrap.Dispose">
            <inheritdoc />
        </member>
        <member name="P:SystemWrapper.IO.MemoryStreamWrap.CanRead">
            <summary>
            Gets a value indicating whether the current stream supports reading.
            </summary>
        </member>
        <member name="P:SystemWrapper.IO.MemoryStreamWrap.CanSeek">
            <summary>
            Gets a value indicating whether the current stream supports seeking.
            </summary>
        </member>
        <member name="P:SystemWrapper.IO.MemoryStreamWrap.CanTimeout">
            <inheritdoc />
        </member>
        <member name="P:SystemWrapper.IO.MemoryStreamWrap.CanWrite">
            <summary>
            Gets a value indicating whether the current stream supports writing. 
            </summary>
        </member>
        <member name="P:SystemWrapper.IO.MemoryStreamWrap.Capacity">
            <inheritdoc />
        </member>
        <member name="P:SystemWrapper.IO.MemoryStreamWrap.Length">
            <summary>
            Gets the length of the stream in bytes.
            </summary>
        </member>
        <member name="P:SystemWrapper.IO.MemoryStreamWrap.MemoryStreamInstance">
            <inheritdoc />
        </member>
        <member name="P:SystemWrapper.IO.MemoryStreamWrap.Position">
            <summary>
            Gets or sets the current position within the stream. 
            </summary>
        </member>
        <member name="P:SystemWrapper.IO.MemoryStreamWrap.ReadTimeout">
            <inheritdoc />
        </member>
        <member name="P:SystemWrapper.IO.MemoryStreamWrap.StreamInstance">
            <inheritdoc />
        </member>
        <member name="P:SystemWrapper.IO.MemoryStreamWrap.WriteTimeout">
            <inheritdoc />
        </member>
        <member name="T:SystemWrapper.IO.FileStreamWrap">
            <summary>
            Wrapper for <see cref="T:System.IO.FileStream"/> class.
            </summary>
        </member>
        <member name="M:SystemWrapper.IO.FileStreamWrap.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:SystemWrapper.IO.FileStreamWrap"/> class on the specified path. 
            </summary>
            <param name="stream">A <see cref="T:System.IO.Stream"/> object.</param>
        </member>
        <member name="M:SystemWrapper.IO.FileStreamWrap.Initialize(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:SystemWrapper.IO.FileStreamWrap"/> class on the specified path. 
            </summary>
            <param name="stream">A <see cref="T:System.IO.Stream"/> object.</param>
        </member>
        <member name="M:SystemWrapper.IO.FileStreamWrap.#ctor(System.IO.FileStream)">
            <summary>
            Initializes a new instance of the <see cref="T:SystemWrapper.IO.FileStreamWrap"/> class on the specified path. 
            </summary>
            <param name="fileStream">A <see cref="T:System.IO.FileStream"/> object.</param>
        </member>
        <member name="M:SystemWrapper.IO.FileStreamWrap.Initialize(System.IO.FileStream)">
            <summary>
            Initializes a new instance of the <see cref="T:SystemWrapper.IO.FileStreamWrap"/> class on the specified path. 
            </summary>
            <param name="fileStream">A <see cref="T:System.IO.FileStream"/> object.</param>
        </member>
        <member name="M:SystemWrapper.IO.FileStreamWrap.#ctor(SystemInterface.Microsoft.Win32.SafeHandles.ISafeFileHandle,System.IO.FileAccess)">
            <summary>
            Initializes a new instance of the <see cref="T:SystemWrapper.IO.FileStreamWrap"/> class for the specified file handle, with the specified read/write permission. 
            </summary>
            <param name="handle">A file handle for the file that the current FileStream object will encapsulate. </param>
            <param name="access">A FileAccess constant that sets the CanRead and CanWrite properties of the FileStream object. </param>
        </member>
        <member name="M:SystemWrapper.IO.FileStreamWrap.Initialize(SystemInterface.Microsoft.Win32.SafeHandles.ISafeFileHandle,System.IO.FileAccess)">
            <summary>
            Initializes a new instance of the <see cref="T:SystemWrapper.IO.FileStreamWrap"/> class for the specified file handle, with the specified read/write permission. 
            </summary>
            <param name="handle">A file handle for the file that the current FileStream object will encapsulate. </param>
            <param name="access">A FileAccess constant that sets the CanRead and CanWrite properties of the FileStream object. </param>
        </member>
        <member name="M:SystemWrapper.IO.FileStreamWrap.#ctor(System.String,System.IO.FileMode)">
            <summary>
            Initializes a new instance of the <see cref="T:SystemWrapper.IO.FileStreamWrap"/> class with the specified path and creation mode. 
            </summary>
            <param name="path">A relative or absolute path for the file that the current FileStream object will encapsulate.</param>
            <param name="mode">A FileMode constant that determines how to open or create the file.</param>
        </member>
        <member name="M:SystemWrapper.IO.FileStreamWrap.Initialize(System.String,System.IO.FileMode)">
            <summary>
            Initializes a new instance of the <see cref="T:SystemWrapper.IO.FileStreamWrap"/> class with the specified path and creation mode. 
            </summary>
            <param name="path">A relative or absolute path for the file that the current FileStream object will encapsulate.</param>
            <param name="mode">A FileMode constant that determines how to open or create the file.</param>
        </member>
        <member name="M:SystemWrapper.IO.FileStreamWrap.#ctor(SystemInterface.Microsoft.Win32.SafeHandles.ISafeFileHandle,System.IO.FileAccess,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SystemWrapper.IO.FileStreamWrap"/> class for the specified file handle, with the specified read/write permission, and buffer size. 
            </summary>
            <param name="handle">A file handle for the file that the current FileStream object will encapsulate. </param>
            <param name="access">A FileAccess constant that sets the CanRead and CanWrite properties of the FileStream object. </param>
            <param name="bufferSize">A positive Int32 value greater than 0 indicating the buffer size. For bufferSize values between one and eight, the actual buffer size is set to eight bytes. </param>
        </member>
        <member name="M:SystemWrapper.IO.FileStreamWrap.Initialize(SystemInterface.Microsoft.Win32.SafeHandles.ISafeFileHandle,System.IO.FileAccess,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SystemWrapper.IO.FileStreamWrap"/> class for the specified file handle, with the specified read/write permission, and buffer size. 
            </summary>
            <param name="handle">A file handle for the file that the current FileStream object will encapsulate. </param>
            <param name="access">A FileAccess constant that sets the CanRead and CanWrite properties of the FileStream object. </param>
            <param name="bufferSize">A positive Int32 value greater than 0 indicating the buffer size. For bufferSize values between one and eight, the actual buffer size is set to eight bytes. </param>
        </member>
        <member name="M:SystemWrapper.IO.FileStreamWrap.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess)">
            <summary>
            Initializes a new instance of the <see cref="T:SystemWrapper.IO.FileStreamWrap"/> class with the specified path and creation mode. 
            </summary>
            <param name="path">A relative or absolute path for the file that the current FileStream object will encapsulate.</param>
            <param name="mode">A FileMode constant that determines how to open or create the file.</param>
            <param name="access">A FileAccess constant that determines how the file can be accessed by the FileStream object. This gets the CanRead and CanWrite properties of the FileStream object. CanSeek is true if path specifies a disk file.</param>
        </member>
        <member name="M:SystemWrapper.IO.FileStreamWrap.Initialize(System.String,System.IO.FileMode,System.IO.FileAccess)">
            <summary>
            Initializes a new instance of the <see cref="T:SystemWrapper.IO.FileStreamWrap"/> class with the specified path and creation mode. 
            </summary>
            <param name="path">A relative or absolute path for the file that the current FileStream object will encapsulate.</param>
            <param name="mode">A FileMode constant that determines how to open or create the file.</param>
            <param name="access">A FileAccess constant that determines how the file can be accessed by the FileStream object. This gets the CanRead and CanWrite properties of the FileStream object. CanSeek is true if path specifies a disk file.</param>
        </member>
        <member name="M:SystemWrapper.IO.FileStreamWrap.#ctor(SystemInterface.Microsoft.Win32.SafeHandles.ISafeFileHandle,System.IO.FileAccess,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:SystemWrapper.IO.FileStreamWrap"/> class for the specified file handle, with the specified read/write permission, and buffer size, and synchronous or asynchronous state. 
            </summary>
            <param name="handle">A file handle for the file that the current FileStream object will encapsulate. </param>
            <param name="access">A FileAccess constant that sets the CanRead and CanWrite properties of the FileStream object. </param>
            <param name="bufferSize">A positive Int32 value greater than 0 indicating the buffer size. For bufferSize values between one and eight, the actual buffer size is set to eight bytes. </param>
            <param name="isAsync"> true if the handle was opened asynchronously (that is, in overlapped I/O mode); otherwise, false. </param>
        </member>
        <member name="M:SystemWrapper.IO.FileStreamWrap.Initialize(SystemInterface.Microsoft.Win32.SafeHandles.ISafeFileHandle,System.IO.FileAccess,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:SystemWrapper.IO.FileStreamWrap"/> class for the specified file handle, with the specified read/write permission, and buffer size, and synchronous or asynchronous state. 
            </summary>
            <param name="handle">A file handle for the file that the current FileStream object will encapsulate. </param>
            <param name="access">A FileAccess constant that sets the CanRead and CanWrite properties of the FileStream object. </param>
            <param name="bufferSize">A positive Int32 value greater than 0 indicating the buffer size. For bufferSize values between one and eight, the actual buffer size is set to eight bytes. </param>
            <param name="isAsync"> true if the handle was opened asynchronously (that is, in overlapped I/O mode); otherwise, false. </param>
        </member>
        <member name="M:SystemWrapper.IO.FileStreamWrap.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
            <summary>
            Initializes a new instance of the <see cref="T:SystemWrapper.IO.FileStreamWrap"/> class with the specified path, creation mode, read/write permission, and sharing permission.
            </summary>
            <param name="path">A relative or absolute path for the file that the current FileStream object will encapsulate.</param>
            <param name="mode">A FileMode constant that determines how to open or create the file.</param>
            <param name="access">A FileAccess constant that determines how the file can be accessed by the FileStream object. This gets the CanRead and CanWrite properties of the FileStream object. CanSeek is true if path specifies a disk file.</param>
            <param name="share">A FileShare constant that determines how the file will be shared by processes. </param>
        </member>
        <member name="M:SystemWrapper.IO.FileStreamWrap.Initialize(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
            <summary>
            Initializes a new instance of the <see cref="T:SystemWrapper.IO.FileStreamWrap"/> class with the specified path, creation mode, read/write permission, and sharing permission.
            </summary>
            <param name="path">A relative or absolute path for the file that the current FileStream object will encapsulate.</param>
            <param name="mode">A FileMode constant that determines how to open or create the file.</param>
            <param name="access">A FileAccess constant that determines how the file can be accessed by the FileStream object. This gets the CanRead and CanWrite properties of the FileStream object. CanSeek is true if path specifies a disk file.</param>
            <param name="share">A FileShare constant that determines how the file will be shared by processes. </param>
        </member>
        <member name="M:SystemWrapper.IO.FileStreamWrap.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SystemWrapper.IO.FileStreamWrap"/> class with the specified path, creation mode, read/write permission, and sharing permission, and buffer size.
            </summary>
            <param name="path">A relative or absolute path for the file that the current FileStream object will encapsulate.</param>
            <param name="mode">A FileMode constant that determines how to open or create the file.</param>
            <param name="access">A FileAccess constant that determines how the file can be accessed by the FileStream object. This gets the CanRead and CanWrite properties of the FileStream object. CanSeek is true if path specifies a disk file.</param>
            <param name="share">A FileShare constant that determines how the file will be shared by processes. </param>
            <param name="bufferSize">A positive Int32 value greater than 0 indicating the buffer size. For bufferSize values between one and eight, the actual buffer size is set to eight bytes. </param>
        </member>
        <member name="M:SystemWrapper.IO.FileStreamWrap.Initialize(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SystemWrapper.IO.FileStreamWrap"/> class with the specified path, creation mode, read/write permission, and sharing permission, and buffer size.
            </summary>
            <param name="path">A relative or absolute path for the file that the current FileStream object will encapsulate.</param>
            <param name="mode">A FileMode constant that determines how to open or create the file.</param>
            <param name="access">A FileAccess constant that determines how the file can be accessed by the FileStream object. This gets the CanRead and CanWrite properties of the FileStream object. CanSeek is true if path specifies a disk file.</param>
            <param name="share">A FileShare constant that determines how the file will be shared by processes. </param>
            <param name="bufferSize">A positive Int32 value greater than 0 indicating the buffer size. For bufferSize values between one and eight, the actual buffer size is set to eight bytes. </param>
        </member>
        <member name="M:SystemWrapper.IO.FileStreamWrap.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:SystemWrapper.IO.FileStreamWrap"/> class with the specified path, creation mode, read/write permission, and sharing permission, and buffer size.
            </summary>
            <param name="path">A relative or absolute path for the file that the current FileStream object will encapsulate.</param>
            <param name="mode">A FileMode constant that determines how to open or create the file.</param>
            <param name="access">A FileAccess constant that determines how the file can be accessed by the FileStream object. This gets the CanRead and CanWrite properties of the FileStream object. CanSeek is true if path specifies a disk file.</param>
            <param name="share">A FileShare constant that determines how the file will be shared by processes. </param>
            <param name="bufferSize">A positive Int32 value greater than 0 indicating the buffer size. For bufferSize values between one and eight, the actual buffer size is set to eight bytes.</param>
            <param name="useAsync">A positive Int32 value greater than 0 indicating the buffer size. For bufferSize values between one and eight, the actual buffer size is set to eight bytes.</param>
        </member>
        <member name="M:SystemWrapper.IO.FileStreamWrap.Initialize(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:SystemWrapper.IO.FileStreamWrap"/> class with the specified path, creation mode, read/write permission, and sharing permission, and buffer size.
            </summary>
            <param name="path">A relative or absolute path for the file that the current FileStream object will encapsulate.</param>
            <param name="mode">A FileMode constant that determines how to open or create the file.</param>
            <param name="access">A FileAccess constant that determines how the file can be accessed by the FileStream object. This gets the CanRead and CanWrite properties of the FileStream object. CanSeek is true if path specifies a disk file.</param>
            <param name="share">A FileShare constant that determines how the file will be shared by processes. </param>
            <param name="bufferSize">A positive Int32 value greater than 0 indicating the buffer size. For bufferSize values between one and eight, the actual buffer size is set to eight bytes.</param>
            <param name="useAsync">A positive Int32 value greater than 0 indicating the buffer size. For bufferSize values between one and eight, the actual buffer size is set to eight bytes.</param>
        </member>
        <member name="M:SystemWrapper.IO.FileStreamWrap.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.IO.FileOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:SystemWrapper.IO.FileStreamWrap"/> class with the specified path, creation mode, read/write and sharing permission, the access other FileStreams can have to the same file, the buffer size, and additional file options.
            </summary>
            <param name="path">A relative or absolute path for the file that the current FileStream object will encapsulate.</param>
            <param name="mode">A FileMode constant that determines how to open or create the file.</param>
            <param name="access">A FileAccess constant that determines how the file can be accessed by the FileStream object. This gets the CanRead and CanWrite properties of the FileStream object. CanSeek is true if path specifies a disk file.</param>
            <param name="share">A FileShare constant that determines how the file will be shared by processes. </param>
            <param name="bufferSize">A positive Int32 value greater than 0 indicating the buffer size. For bufferSize values between one and eight, the actual buffer size is set to eight bytes.</param>
            <param name="options">A FileOptions value that specifies additional file options.</param>
        </member>
        <member name="M:SystemWrapper.IO.FileStreamWrap.Initialize(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32,System.IO.FileOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:SystemWrapper.IO.FileStreamWrap"/> class with the specified path, creation mode, read/write and sharing permission, the access other FileStreams can have to the same file, the buffer size, and additional file options.
            </summary>
            <param name="path">A relative or absolute path for the file that the current FileStream object will encapsulate.</param>
            <param name="mode">A FileMode constant that determines how to open or create the file.</param>
            <param name="access">A FileAccess constant that determines how the file can be accessed by the FileStream object. This gets the CanRead and CanWrite properties of the FileStream object. CanSeek is true if path specifies a disk file.</param>
            <param name="share">A FileShare constant that determines how the file will be shared by processes. </param>
            <param name="bufferSize">A positive Int32 value greater than 0 indicating the buffer size. For bufferSize values between one and eight, the actual buffer size is set to eight bytes.</param>
            <param name="options">A FileOptions value that specifies additional file options.</param>
        </member>
        <member name="M:SystemWrapper.IO.FileStreamWrap.#ctor(System.String,System.IO.FileMode,System.Security.AccessControl.FileSystemRights,System.IO.FileShare,System.Int32,System.IO.FileOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:SystemWrapper.IO.FileStreamWrap"/> class with the specified path, creation mode, access rights and sharing permission, the buffer size, and additional file options.
            </summary>
            <param name="path">A relative or absolute path for the file that the current FileStream object will encapsulate.</param>
            <param name="mode">A FileMode constant that determines how to open or create the file.</param>
            <param name="rights">A FileSystemRights constant that determines the access rights to use when creating access and audit rules for the file.</param>
            <param name="share">A FileShare constant that determines how the file will be shared by processes. </param>
            <param name="bufferSize">A positive Int32 value greater than 0 indicating the buffer size. For bufferSize values between one and eight, the actual buffer size is set to eight bytes.</param>
            <param name="options">A FileOptions value that specifies additional file options.</param>
        </member>
        <member name="M:SystemWrapper.IO.FileStreamWrap.Initialize(System.String,System.IO.FileMode,System.Security.AccessControl.FileSystemRights,System.IO.FileShare,System.Int32,System.IO.FileOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:SystemWrapper.IO.FileStreamWrap"/> class with the specified path, creation mode, access rights and sharing permission, the buffer size, and additional file options.
            </summary>
            <param name="path">A relative or absolute path for the file that the current FileStream object will encapsulate.</param>
            <param name="mode">A FileMode constant that determines how to open or create the file.</param>
            <param name="rights">A FileSystemRights constant that determines the access rights to use when creating access and audit rules for the file.</param>
            <param name="share">A FileShare constant that determines how the file will be shared by processes. </param>
            <param name="bufferSize">A positive Int32 value greater than 0 indicating the buffer size. For bufferSize values between one and eight, the actual buffer size is set to eight bytes.</param>
            <param name="options">A FileOptions value that specifies additional file options.</param>
        </member>
        <member name="M:SystemWrapper.IO.FileStreamWrap.#ctor(System.String,System.IO.FileMode,System.Security.AccessControl.FileSystemRights,System.IO.FileShare,System.Int32,System.IO.FileOptions,System.Security.AccessControl.FileSecurity)">
            <summary>
            Initializes a new instance of the <see cref="T:SystemWrapper.IO.FileStreamWrap"/> class with the specified path, creation mode, access rights and sharing permission, the buffer size, additional file options, access control and audit security.
            </summary>
            <param name="path">A relative or absolute path for the file that the current FileStream object will encapsulate.</param>
            <param name="mode">A FileMode constant that determines how to open or create the file.</param>
            <param name="rights">A FileSystemRights constant that determines the access rights to use when creating access and audit rules for the file.</param>
            <param name="share">A FileShare constant that determines how the file will be shared by processes. </param>
            <param name="bufferSize">A positive Int32 value greater than 0 indicating the buffer size. For bufferSize values between one and eight, the actual buffer size is set to eight bytes.</param>
            <param name="options">A FileOptions value that specifies additional file options.</param>
            <param name="fileSecurity">A FileSecurity constant that determines the access control and audit security for the file.</param>
        </member>
        <member name="M:SystemWrapper.IO.FileStreamWrap.Initialize(System.String,System.IO.FileMode,System.Security.AccessControl.FileSystemRights,System.IO.FileShare,System.Int32,System.IO.FileOptions,System.Security.AccessControl.FileSecurity)">
            <summary>
            Initializes a new instance of the <see cref="T:SystemWrapper.IO.FileStreamWrap"/> class with the specified path, creation mode, access rights and sharing permission, the buffer size, additional file options, access control and audit security.
            </summary>
            <param name="path">A relative or absolute path for the file that the current FileStream object will encapsulate.</param>
            <param name="mode">A FileMode constant that determines how to open or create the file.</param>
            <param name="rights">A FileSystemRights constant that determines the access rights to use when creating access and audit rules for the file.</param>
            <param name="share">A FileShare constant that determines how the file will be shared by processes. </param>
            <param name="bufferSize">A positive Int32 value greater than 0 indicating the buffer size. For bufferSize values between one and eight, the actual buffer size is set to eight bytes.</param>
            <param name="options">A FileOptions value that specifies additional file options.</param>
            <param name="fileSecurity">A FileSecurity constant that determines the access control and audit security for the file.</param>
        </member>
        <member name="M:SystemWrapper.IO.FileStreamWrap.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous read.
            </summary>
            <param name="array">The buffer to read data into.</param>
            <param name="offset">The byte offset in array at which to begin reading.</param>
            <param name="numBytes">The maximum number of bytes to read.</param>
            <param name="userCallback">The method to be called when the asynchronous read operation is completed.</param>
            <param name="stateObject">A user-provided object that distinguishes this particular asynchronous read request from other requests.</param>
            <returns>A user-provided object that distinguishes this particular asynchronous read request from other requests.</returns>
        </member>
        <member name="M:SystemWrapper.IO.FileStreamWrap.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous write. 
            </summary>
            <param name="array">The buffer to read data into.</param>
            <param name="offset">The byte offset in array at which to begin reading.</param>
            <param name="numBytes">The maximum number of bytes to read.</param>
            <param name="userCallback">The method to be called when the asynchronous read operation is completed.</param>
            <param name="stateObject">A user-provided object that distinguishes this particular asynchronous read request from other requests.</param>
            <returns>An IAsyncResult that references the asynchronous write.</returns>
        </member>
        <member name="M:SystemWrapper.IO.FileStreamWrap.Close">
            <summary>
            Closes the current stream and releases any resources (such as sockets and file handles) associated with the current stream. 
            </summary>
        </member>
        <member name="M:SystemWrapper.IO.FileStreamWrap.EndRead(System.IAsyncResult)">
            <summary>
            Waits for the pending asynchronous read to complete. 
            </summary>
            <param name="asyncResult">The reference to the pending asynchronous request to wait for.</param>
            <returns>The number of bytes read from the stream, between 0 and the number of bytes you requested. Streams only return 0 at the end of the stream, otherwise, they should block until at least 1 byte is available.</returns>
        </member>
        <member name="M:SystemWrapper.IO.FileStreamWrap.EndWrite(System.IAsyncResult)">
            <summary>
            Ends an asynchronous write, blocking until the I/O operation has completed. 
            </summary>
            <param name="asyncResult">The pending asynchronous I/O request. </param>
        </member>
        <member name="M:SystemWrapper.IO.FileStreamWrap.Flush">
            <summary>
            Clears all buffers for this stream and causes any buffered data to be written to the file system.
            </summary>
        </member>
        <member name="M:SystemWrapper.IO.FileStreamWrap.GetAccessControl">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.FileStreamWrap.Lock(System.Int64,System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.FileStreamWrap.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a block of bytes from the stream and writes the data in a given buffer. 
            </summary>
            <param name="buffer">When this method returns, contains the specified byte array with the values between offset and (offset + count - 1) replaced by the bytes read from the current source. </param>
            <param name="offset">The byte offset in array at which the read bytes will be placed. </param>
            <param name="count">The maximum number of bytes to read. </param>
            <returns>The total number of bytes read into the buffer. This might be less than the number of bytes requested if that number of bytes are not currently available, or zero if the end of the stream is reached. </returns>
        </member>
        <member name="M:SystemWrapper.IO.FileStreamWrap.ReadByte">
            <summary>
            Reads a byte from the file and advances the read position one byte. 
            </summary>
            <returns>The byte, cast to an Int32, or -1 if the end of the stream has been reached.</returns>
        </member>
        <member name="M:SystemWrapper.IO.FileStreamWrap.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the current position of this stream to the given value. 
            </summary>
            <param name="offset">The point relative to origin from which to begin seeking.</param>
            <param name="origin">Specifies the beginning, the end, or the current position as a reference point for origin, using a value of type SeekOrigin. </param>
            <returns>The new position in the stream.</returns>
        </member>
        <member name="M:SystemWrapper.IO.FileStreamWrap.SetAccessControl(SystemInterface.Security.AccessControl.IFileSecurity)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.FileStreamWrap.SetLength(System.Int64)">
            <summary>
            Sets the length of this stream to the given value.
            </summary>
            <param name="value">The new length of the stream.</param>
        </member>
        <member name="M:SystemWrapper.IO.FileStreamWrap.Synchronized(SystemInterface.IO.IStream)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.FileStreamWrap.ToString">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.FileStreamWrap.Dispose">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.FileStreamWrap.Unlock(System.Int64,System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.FileStreamWrap.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a block of bytes to this stream using data from a buffer.
            </summary>
            <param name="buffer">The buffer containing data to write to the stream.</param>
            <param name="offset">The zero-based byte offset in array at which to begin copying bytes to the current stream.</param>
            <param name="count">The number of bytes to be written to the current stream.</param>
        </member>
        <member name="M:SystemWrapper.IO.FileStreamWrap.WriteByte(System.Byte)">
            <summary>
            Writes a byte to the current position in the file stream.
            </summary>
            <param name="value">A byte to write to the stream.</param>
        </member>
        <member name="P:SystemWrapper.IO.FileStreamWrap.CanRead">
            <summary>
            Gets a value indicating whether the current stream supports reading.
            </summary>
        </member>
        <member name="P:SystemWrapper.IO.FileStreamWrap.CanSeek">
            <summary>
            Gets a value indicating whether the current stream supports seeking. 
            </summary>
        </member>
        <member name="P:SystemWrapper.IO.FileStreamWrap.CanTimeout">
            <inheritdoc />
        </member>
        <member name="P:SystemWrapper.IO.FileStreamWrap.CanWrite">
            <summary>
            Gets a value indicating whether the current stream supports writing.
            </summary>
        </member>
        <member name="P:SystemWrapper.IO.FileStreamWrap.ReadTimeout">
            <inheritdoc />
        </member>
        <member name="P:SystemWrapper.IO.FileStreamWrap.StreamInstance">
            <summary>
            Gets <see cref="T:System.IO.Stream"/> object.
            </summary>
        </member>
        <member name="P:SystemWrapper.IO.FileStreamWrap.WriteTimeout">
            <inheritdoc />
        </member>
        <member name="P:SystemWrapper.IO.FileStreamWrap.FileStreamInstance">
            <inheritdoc />
        </member>
        <member name="P:SystemWrapper.IO.FileStreamWrap.IsAsync">
            <inheritdoc />
        </member>
        <member name="P:SystemWrapper.IO.FileStreamWrap.Length">
            <summary>
            Gets the length in bytes of the stream.
            </summary>
        </member>
        <member name="P:SystemWrapper.IO.FileStreamWrap.Name">
            <inheritdoc />
        </member>
        <member name="P:SystemWrapper.IO.FileStreamWrap.Position">
            <summary>
            Gets or sets the current position of this stream.
            </summary>
        </member>
        <member name="P:SystemWrapper.IO.FileStreamWrap.SafeFileHandle">
            <inheritdoc />
        </member>
        <member name="T:SystemWrapper.VersionWrap">
            <summary>
            Wrapper for <see cref="T:System.Version"/> class.
            </summary>
        </member>
        <member name="M:SystemWrapper.VersionWrap.#ctor(System.Version)">
            <summary>
            Initializes a new instance of the <see cref="T:SystemWrapper.VersionWrap"/> class. 
            </summary>
        </member>
        <member name="M:SystemWrapper.VersionWrap.Initialize(System.Version)">
            <summary>
            Initializes a new instance of the <see cref="T:SystemWrapper.VersionWrap"/> class. 
            </summary>
        </member>
        <member name="M:SystemWrapper.VersionWrap.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SystemWrapper.VersionWrap"/> class. 
            </summary>
        </member>
        <member name="M:SystemWrapper.VersionWrap.Initialize">
            <summary>
            Initializes a new instance of the <see cref="T:SystemWrapper.VersionWrap"/> class. 
            </summary>
        </member>
        <member name="M:SystemWrapper.VersionWrap.#ctor(System.String)">
            <summary>
            Initializes a new instance of the Version class using the specified string.
            </summary>
            <param name="version">A string containing the major, minor, build, and revision numbers, where each number is delimited with a period character ('.').</param>
        </member>
        <member name="M:SystemWrapper.VersionWrap.Initialize(System.String)">
            <summary>
            Initializes a new instance of the Version class using the specified string.
            </summary>
            <param name="version">A string containing the major, minor, build, and revision numbers, where each number is delimited with a period character ('.').</param>
        </member>
        <member name="M:SystemWrapper.VersionWrap.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the Version class using the specified major and minor values. 
            </summary>
            <param name="major">The major version number.</param>
            <param name="minor">The minor version number.</param>
        </member>
        <member name="M:SystemWrapper.VersionWrap.Initialize(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the Version class using the specified major and minor values. 
            </summary>
            <param name="major">The major version number.</param>
            <param name="minor">The minor version number.</param>
        </member>
        <member name="M:SystemWrapper.VersionWrap.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the Version class using the specified major and minor values. 
            </summary>
            <param name="major">The major version number.</param>
            <param name="minor">The minor version number.</param>
            <param name="build">The build number.</param>
        </member>
        <member name="M:SystemWrapper.VersionWrap.Initialize(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the Version class using the specified major and minor values. 
            </summary>
            <param name="major">The major version number.</param>
            <param name="minor">The minor version number.</param>
            <param name="build">The build number.</param>
        </member>
        <member name="M:SystemWrapper.VersionWrap.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the Version class using the specified major and minor values. 
            </summary>
            <param name="major">The major version number.</param>
            <param name="minor">The minor version number.</param>
            <param name="build">The build number.</param>
            <param name="revision">The revision number.</param>
        </member>
        <member name="M:SystemWrapper.VersionWrap.Initialize(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the Version class using the specified major and minor values. 
            </summary>
            <param name="major">The major version number.</param>
            <param name="minor">The minor version number.</param>
            <param name="build">The build number.</param>
            <param name="revision">The revision number.</param>
        </member>
        <member name="M:SystemWrapper.VersionWrap.Clone">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.VersionWrap.CompareTo(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.VersionWrap.CompareTo(SystemInterface.IVersion)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.VersionWrap.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.VersionWrap.Equals(SystemInterface.IVersion)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.VersionWrap.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.VersionWrap.ToString">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.VersionWrap.ToString(System.Int32)">
            <inheritdoc />
        </member>
        <member name="P:SystemWrapper.VersionWrap.VersionInstance">
            <inheritdoc />
        </member>
        <member name="P:SystemWrapper.VersionWrap.Build">
            <inheritdoc />
        </member>
        <member name="P:SystemWrapper.VersionWrap.Major">
            <inheritdoc />
        </member>
        <member name="P:SystemWrapper.VersionWrap.MajorRevision">
            <inheritdoc />
        </member>
        <member name="P:SystemWrapper.VersionWrap.Minor">
            <inheritdoc />
        </member>
        <member name="P:SystemWrapper.VersionWrap.MinorRevision">
            <inheritdoc />
        </member>
        <member name="P:SystemWrapper.VersionWrap.Revision">
            <inheritdoc />
        </member>
        <member name="T:SystemWrapper.Security.AccessControl.RegistrySecurityWrap">
            <summary>
            RegistrySecurityWrap is a wrapper for RegistrySecurity
            that implements IRegistrySecurity. Using this instead 
            of using RegistrySecurity directly
            </summary>
        </member>
        <member name="M:SystemWrapper.Security.AccessControl.RegistrySecurityWrap.#ctor(System.Security.AccessControl.RegistrySecurity)">
            <summary>
            The Constructor
            </summary>
            <param name="registrySecurity"></param>
        </member>
        <member name="P:SystemWrapper.Security.AccessControl.RegistrySecurityWrap.RegistrySecurityInstance">
            <inheritdoc />
        </member>
        <member name="T:SystemWrapper.IO.PathWrap">
            <summary>
            Wrapper for <see cref="T:System.IO.Path"/> class.
            </summary>
        </member>
        <member name="M:SystemWrapper.IO.PathWrap.ChangeExtension(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.PathWrap.Combine(System.String[])">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.PathWrap.Combine(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.PathWrap.Combine(System.String,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.PathWrap.Combine(System.String,System.String,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.PathWrap.GetDirectoryName(System.String)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.PathWrap.GetExtension(System.String)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.PathWrap.GetFileName(System.String)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.PathWrap.GetFileNameWithoutExtension(System.String)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.PathWrap.GetFullPath(System.String)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.PathWrap.GetInvalidFileNameChars">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.PathWrap.GetInvalidPathChars">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.PathWrap.GetPathRoot(System.String)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.PathWrap.GetRandomFileName">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.PathWrap.GetTempFileName">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.PathWrap.GetTempPath">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.PathWrap.HasExtension(System.String)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.PathWrap.IsPathRooted(System.String)">
            <inheritdoc />
        </member>
        <member name="P:SystemWrapper.IO.PathWrap.AltDirectorySeparatorChar">
            <inheritdoc />
        </member>
        <member name="P:SystemWrapper.IO.PathWrap.DirectorySeparatorChar">
            <inheritdoc />
        </member>
        <member name="P:SystemWrapper.IO.PathWrap.PathSeparator">
            <inheritdoc />
        </member>
        <member name="P:SystemWrapper.IO.PathWrap.VolumeSeparatorChar">
            <inheritdoc />
        </member>
        <member name="T:SystemWrapper.Threading.ThreadWrap">
            <summary>
            Wrapper for <see cref="T:System.Threading.Thread"/> class.
            </summary>
        </member>
        <member name="M:SystemWrapper.Threading.ThreadWrap.Sleep(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.Threading.ThreadWrap.Sleep(System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="T:SystemWrapper.IO.FileSystemWatcherWrap">
            <summary>
            Wrapper for <see cref="T:System.IO.FileSystemWatcher"/> class.
            </summary>
        </member>
        <member name="M:SystemWrapper.IO.FileSystemWatcherWrap.#ctor">
            <summary> 
            Initializes a new instance of the <see cref="T:System.IO.FileSystemWatcher"/> class. 
            </summary>
        </member>
        <member name="M:SystemWrapper.IO.FileSystemWatcherWrap.#ctor(System.String)">
            <summary>
                  Initializes a new instance of the <see cref="T:System.IO.FileSystemWatcher"/> class, 
                  given the specified directory to monitor.  
            </summary>
        </member>
        <member name="M:SystemWrapper.IO.FileSystemWatcherWrap.#ctor(System.String,System.String)">
            <summary>    
                  Initializes a new instance of the <see cref="T:System.IO.FileSystemWatcher"/> class,
                  given the specified directory and type of files to monitor.
            </summary> 
        </member>
        <member name="M:SystemWrapper.IO.FileSystemWatcherWrap.Initialize">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.FileSystemWatcherWrap.Initialize(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.FileSystemWatcherWrap.BeginInit">
            <summary>
               Notifies the object that initialization is beginning and tells it to standby. 
            </summary> 
        </member>
        <member name="M:SystemWrapper.IO.FileSystemWatcherWrap.EndInit">
            <summary> 
               
                  Notifies the object that initialization is complete.
               
            </summary> 
        </member>
        <member name="M:SystemWrapper.IO.FileSystemWatcherWrap.WaitForChanged(System.IO.WatcherChangeTypes)">
            <summary> 
                  A synchronous method that returns a structure that
                  contains specific information on the change that occurred, given the type
                  of change that you wish to monitor. 
            </summary> 
        </member>
        <member name="M:SystemWrapper.IO.FileSystemWatcherWrap.WaitForChanged(System.IO.WatcherChangeTypes,System.Int32)">
            <summary>
                  A synchronous 
                  method that returns a structure that contains specific information on the change that occurred, given the
                  type of change that you wish to monitor and the time (in milliseconds) to wait before timing out. 
            </summary>
        </member>
        <member name="M:SystemWrapper.IO.FileSystemWatcherWrap.Dispose">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.FileSystemWatcherWrap.Dispose(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.FileSystemWatcherWrap.Finalize">
            <inheritdoc />
        </member>
        <member name="P:SystemWrapper.IO.FileSystemWatcherWrap.FileSystemWatcherInstance">
            <inheritdoc />
        </member>
        <member name="P:SystemWrapper.IO.FileSystemWatcherWrap.NotifyFilter">
            <summary> 
                  Gets or sets the type of changes to watch for. 
            </summary>
        </member>
        <member name="P:SystemWrapper.IO.FileSystemWatcherWrap.EnableRaisingEvents">
            <summary>
               Gets or sets a value indicating whether the component is enabled.
            </summary> 
        </member>
        <member name="P:SystemWrapper.IO.FileSystemWatcherWrap.Filter">
            <summary> 
               Gets or sets the filter string, used to determine what files are monitored in a directory.
            </summary> 
        </member>
        <member name="P:SystemWrapper.IO.FileSystemWatcherWrap.IncludeSubdirectories">
            <summary> 
                  Gets or sets a
                  value indicating whether subdirectories within the specified path should be monitored.
            </summary>
        </member>
        <member name="P:SystemWrapper.IO.FileSystemWatcherWrap.InternalBufferSize">
            <summary>
               Gets or 
                  sets the size of the internal buffer. 
            </summary>
        </member>
        <member name="P:SystemWrapper.IO.FileSystemWatcherWrap.Path">
            <summary> 
               Gets or sets the path of the directory to watch.
            </summary>
        </member>
        <member name="P:SystemWrapper.IO.FileSystemWatcherWrap.SynchronizingObject">
            <summary> 
                  Gets or sets the object used to marshal the event handler calls issued as a 
                  result of a directory change. 
            </summary> 
        </member>
        <member name="E:SystemWrapper.IO.FileSystemWatcherWrap.Changed">
            <summary> 
                  Occurs when a file or directory in the specified <see cref="P:System.IO.FileSystemWatcher.Path"/> 
                  is changed.
            </summary>
        </member>
        <member name="E:SystemWrapper.IO.FileSystemWatcherWrap.Created">
            <summary>
                  Occurs when a file or directory in the specified <see cref="P:System.IO.FileSystemWatcher.Path"/> 
                  is created.
            </summary>
        </member>
        <member name="E:SystemWrapper.IO.FileSystemWatcherWrap.Deleted">
            <summary>
                  Occurs when a file or directory in the specified <see cref="P:System.IO.FileSystemWatcher.Path"/>
                  is deleted. 
            </summary>
        </member>
        <member name="E:SystemWrapper.IO.FileSystemWatcherWrap.Error">
            <summary>
                  Occurs when the internal buffer overflows.
            </summary>
        </member>
        <member name="E:SystemWrapper.IO.FileSystemWatcherWrap.Renamed">
            <summary> 
                  Occurs when a file or directory in the specified <see cref="P:System.IO.FileSystemWatcher.Path"/> 
                  is renamed.
            </summary>
        </member>
        <member name="T:SystemWrapper.Diagnostics.ProcessWrap">
            <summary>
             Wrapper for <see cref="T:System.Diagnostics.Process"/> class.
            </summary>
        </member>
        <member name="M:SystemWrapper.Diagnostics.ProcessWrap.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SystemWrapper.Diagnostics.ProcessWrap"/> class.
            </summary>
        </member>
        <member name="M:SystemWrapper.Diagnostics.ProcessWrap.Initialize">
            <summary>
            Initializes a new instance of the <see cref="T:SystemWrapper.Diagnostics.ProcessWrap"/> class.
            </summary>
        </member>
        <member name="M:SystemWrapper.Diagnostics.ProcessWrap.Close">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.Diagnostics.ProcessWrap.Start">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.Diagnostics.ProcessWrap.WaitForExit">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.Diagnostics.ProcessWrap.WaitForExit(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.Diagnostics.ProcessWrap.WaitForInputIdle">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.Diagnostics.ProcessWrap.Kill">
            <inheritdoc />
        </member>
        <member name="P:SystemWrapper.Diagnostics.ProcessWrap.ExitCode">
            <inheritdoc />
        </member>
        <member name="P:SystemWrapper.Diagnostics.ProcessWrap.ProcessInstance">
            <inheritdoc />
        </member>
        <member name="P:SystemWrapper.Diagnostics.ProcessWrap.StartInfo">
            <inheritdoc />
        </member>
        <member name="P:SystemWrapper.Diagnostics.ProcessWrap.StandardOutput">
            <inheritdoc />
        </member>
        <member name="P:SystemWrapper.Diagnostics.ProcessWrap.StandardError">
            <inheritdoc />
        </member>
        <member name="P:SystemWrapper.Diagnostics.ProcessWrap.HasExited">
            <inheritdoc />
        </member>
        <member name="P:SystemWrapper.Diagnostics.ProcessWrap.StartTime">
            <inheritdoc />
        </member>
        <member name="P:SystemWrapper.Diagnostics.ProcessWrap.ExitTime">
            <inheritdoc />
        </member>
        <member name="T:SystemWrapper.Security.AccessControl.FileSecurityWrap">
            <summary>
            Wrapper for <see cref="T:System.Security.AccessControl.FileSecurity"/> class.
            </summary>
        </member>
        <member name="M:SystemWrapper.Security.AccessControl.FileSecurityWrap.#ctor(System.Security.AccessControl.FileSecurity)">
            <summary>
            Initializes a new instance of the <see cref="T:SystemWrapper.Security.AccessControl.FileSecurityWrap"/> class on the specified path. 
            </summary>
            <param name="fileSecurity">A FileSecurity object.</param>
        </member>
        <member name="M:SystemWrapper.Security.AccessControl.FileSecurityWrap.Initialize(System.Security.AccessControl.FileSecurity)">
            <summary>
            Initializes a new instance of the <see cref="T:SystemWrapper.Security.AccessControl.FileSecurityWrap"/> class on the specified path. 
            </summary>
            <param name="fileSecurity">A FileSecurity object.</param>
        </member>
        <member name="M:SystemWrapper.Security.AccessControl.FileSecurityWrap.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SystemWrapper.Security.AccessControl.FileSecurityWrap"/> class on the specified path. 
            </summary>
        </member>
        <member name="M:SystemWrapper.Security.AccessControl.FileSecurityWrap.Initialize">
            <summary>
            Initializes a new instance of the <see cref="T:SystemWrapper.Security.AccessControl.FileSecurityWrap"/> class on the specified path. 
            </summary>
        </member>
        <member name="P:SystemWrapper.Security.AccessControl.FileSecurityWrap.FileSecurityInstance">
            <inheritdoc />
        </member>
        <member name="T:SystemWrapper.IO.FileWrap">
            <summary>
            Wrapper for <see cref="T:System.IO.File"/> class.
            </summary>
        </member>
        <member name="M:SystemWrapper.IO.FileWrap.AppendAllText(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.FileWrap.AppendAllText(System.String,System.String,System.Text.Encoding)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.FileWrap.AppendText(System.String)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.FileWrap.Copy(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.FileWrap.Copy(System.String,System.String,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.FileWrap.Create(System.String)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.FileWrap.Create(System.String,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.FileWrap.Create(System.String,System.Int32,System.IO.FileOptions)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.FileWrap.Create(System.String,System.Int32,System.IO.FileOptions,SystemInterface.Security.AccessControl.IFileSecurity)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.FileWrap.CreateText(System.String)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.FileWrap.Decrypt(System.String)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.FileWrap.Delete(System.String)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.FileWrap.Encrypt(System.String)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.FileWrap.Exists(System.String)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.FileWrap.GetAccessControl(System.String)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.FileWrap.GetAccessControl(System.String,System.Security.AccessControl.AccessControlSections)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.FileWrap.GetAttributes(System.String)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.FileWrap.GetCreationTime(System.String)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.FileWrap.GetCreationTimeUtc(System.String)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.FileWrap.GetLastAccessTime(System.String)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.FileWrap.GetLastAccessTimeUtc(System.String)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.FileWrap.GetLastWriteTime(System.String)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.FileWrap.GetLastWriteTimeUtc(System.String)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.FileWrap.Move(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.FileWrap.Open(System.String,System.IO.FileMode)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.FileWrap.Open(System.String,System.IO.FileMode,System.IO.FileAccess)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.FileWrap.Open(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.FileWrap.OpenRead(System.String)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.FileWrap.OpenText(System.String)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.FileWrap.OpenWrite(System.String)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.FileWrap.ReadAllBytes(System.String)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.FileWrap.ReadAllLines(System.String)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.FileWrap.ReadAllLines(System.String,System.Text.Encoding)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.FileWrap.ReadAllText(System.String)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.FileWrap.ReadAllText(System.String,System.Text.Encoding)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.FileWrap.Replace(System.String,System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.FileWrap.Replace(System.String,System.String,System.String,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.FileWrap.SetAccessControl(System.String,SystemInterface.Security.AccessControl.IFileSecurity)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.FileWrap.SetAttributes(System.String,System.IO.FileAttributes)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.FileWrap.SetCreationTime(System.String,SystemInterface.IDateTime)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.FileWrap.SetCreationTimeUtc(System.String,SystemInterface.IDateTime)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.FileWrap.SetLastAccessTime(System.String,SystemInterface.IDateTime)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.FileWrap.SetLastAccessTimeUtc(System.String,SystemInterface.IDateTime)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.FileWrap.SetLastWriteTime(System.String,SystemInterface.IDateTime)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.FileWrap.SetLastWriteTimeUtc(System.String,SystemInterface.IDateTime)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.FileWrap.WriteAllBytes(System.String,System.Byte[])">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.FileWrap.WriteAllLines(System.String,System.String[])">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.FileWrap.WriteAllLines(System.String,System.String[],System.Text.Encoding)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.FileWrap.WriteAllText(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.FileWrap.WriteAllText(System.String,System.String,System.Text.Encoding)">
            <inheritdoc />
        </member>
        <member name="T:SystemWrapper.IO.StreamReaderWrap">
            <summary>
            Wrapper for <see cref="T:System.IO.StreamReader"/> class.
            </summary>
        </member>
        <member name="M:SystemWrapper.IO.StreamReaderWrap.#ctor(System.IO.TextReader)">
            <summary>
            Initializes a new instance of the <see cref="T:SystemWrapper.IO.StreamReaderWrap"/> class on the specified path. 
            </summary>
            <param name="textReader">A <see cref="T:System.IO.TextReader"/> object.</param>
        </member>
        <member name="M:SystemWrapper.IO.StreamReaderWrap.Initialize(System.IO.TextReader)">
            <summary>
            Initializes a new instance of the <see cref="T:SystemWrapper.IO.StreamReaderWrap"/> class on the specified path. 
            </summary>
            <param name="textReader">A <see cref="T:System.IO.TextReader"/> object.</param>
        </member>
        <member name="M:SystemWrapper.IO.StreamReaderWrap.#ctor(System.IO.StreamReader)">
            <summary>
            Initializes a new instance of the <see cref="T:SystemWrapper.IO.StreamReaderWrap"/> class on the specified path. 
            </summary>
            <param name="streamReader">A <see cref="T:System.IO.StreamReader"/> object.</param>
        </member>
        <member name="M:SystemWrapper.IO.StreamReaderWrap.Initialize(System.IO.StreamReader)">
            <summary>
            Initializes a new instance of the <see cref="T:SystemWrapper.IO.StreamReaderWrap"/> class on the specified path. 
            </summary>
            <param name="streamReader">A <see cref="T:System.IO.StreamReader"/> object.</param>
        </member>
        <member name="M:SystemWrapper.IO.StreamReaderWrap.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:System.IO.StreamReader"/> class for the specified stream.
            </summary>
            <param name="stream">The stream to write to.</param>
        </member>
        <member name="M:SystemWrapper.IO.StreamReaderWrap.Initialize(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:System.IO.StreamReader"/> class for the specified stream.
            </summary>
            <param name="stream">The stream to write to.</param>
        </member>
        <member name="M:SystemWrapper.IO.StreamReaderWrap.#ctor(SystemInterface.IO.IStream)">
            <summary>
            Initializes a new instance of the <see cref="T:System.IO.StreamReader"/> class for the specified stream.
            </summary>
            <param name="stream">The stream wrapper to write to.</param>
        </member>
        <member name="M:SystemWrapper.IO.StreamReaderWrap.Initialize(SystemInterface.IO.IStream)">
            <summary>
            Initializes a new instance of the <see cref="T:System.IO.StreamReader"/> class for the specified stream.
            </summary>
            <param name="stream">The stream wrapper to write to.</param>
        </member>
        <member name="M:SystemWrapper.IO.StreamReaderWrap.#ctor(System.String)">
            <summary>
            Initializes a new instance of the StreamReader class for the specified file name.
            </summary>
            <param name="path">The complete file path to be read.</param>
        </member>
        <member name="M:SystemWrapper.IO.StreamReaderWrap.Initialize(System.String)">
            <summary>
            Initializes a new instance of the StreamReader class for the specified file name.
            </summary>
            <param name="path">The complete file path to be read.</param>
        </member>
        <member name="M:SystemWrapper.IO.StreamReaderWrap.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
            Initializes a new instance of the StreamReader class for the specified stream, with the specified byte order mark detection option.
            </summary>
            <param name="stream">The stream to be read. </param>
            <param name="detectEncodingFromByteOrderMarks">Indicates whether to look for byte order marks at the beginning of the file.</param>
        </member>
        <member name="M:SystemWrapper.IO.StreamReaderWrap.Initialize(System.IO.Stream,System.Boolean)">
            <summary>
            Initializes a new instance of the StreamReader class for the specified stream, with the specified byte order mark detection option.
            </summary>
            <param name="stream">The stream to be read. </param>
            <param name="detectEncodingFromByteOrderMarks">Indicates whether to look for byte order marks at the beginning of the file.</param>
        </member>
        <member name="M:SystemWrapper.IO.StreamReaderWrap.#ctor(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Initializes a new instance of the StreamReader class for the specified stream, with the specified character encoding.
            </summary>
            <param name="stream">The stream to be read.</param>
            <param name="encoding">The character encoding to use.</param>
        </member>
        <member name="M:SystemWrapper.IO.StreamReaderWrap.Initialize(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Initializes a new instance of the StreamReader class for the specified stream, with the specified character encoding.
            </summary>
            <param name="stream">The stream to be read.</param>
            <param name="encoding">The character encoding to use.</param>
        </member>
        <member name="M:SystemWrapper.IO.StreamReaderWrap.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the StreamReader class for the specified file name, with the specified byte order mark detection option.
            </summary>
            <param name="path">The complete file path to be read. </param>
            <param name="detectEncodingFromByteOrderMarks">Indicates whether to look for byte order marks at the beginning of the file.</param>
        </member>
        <member name="M:SystemWrapper.IO.StreamReaderWrap.Initialize(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the StreamReader class for the specified file name, with the specified byte order mark detection option.
            </summary>
            <param name="path">The complete file path to be read. </param>
            <param name="detectEncodingFromByteOrderMarks">Indicates whether to look for byte order marks at the beginning of the file.</param>
        </member>
        <member name="M:SystemWrapper.IO.StreamReaderWrap.#ctor(System.String,System.Text.Encoding)">
            <summary>
            Initializes a new instance of the StreamReader class for the specified file name, with the specified character encoding.
            </summary>
            <param name="path">The complete file path to be read.</param>
            <param name="encoding">The character encoding to use.</param>
        </member>
        <member name="M:SystemWrapper.IO.StreamReaderWrap.Initialize(System.String,System.Text.Encoding)">
            <summary>
            Initializes a new instance of the StreamReader class for the specified file name, with the specified character encoding.
            </summary>
            <param name="path">The complete file path to be read.</param>
            <param name="encoding">The character encoding to use.</param>
        </member>
        <member name="M:SystemWrapper.IO.StreamReaderWrap.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean)">
            <summary>
            Initializes a new instance of the StreamReader class for the specified stream, with the specified character encoding and byte order mark detection option.
            </summary>
            <param name="stream">The stream to be read. </param>
            <param name="encoding">The character encoding to use. </param>
            <param name="detectEncodingFromByteOrderMarks">Indicates whether to look for byte order marks at the beginning of the file.</param>
        </member>
        <member name="M:SystemWrapper.IO.StreamReaderWrap.Initialize(System.IO.Stream,System.Text.Encoding,System.Boolean)">
            <summary>
            Initializes a new instance of the StreamReader class for the specified stream, with the specified character encoding and byte order mark detection option.
            </summary>
            <param name="stream">The stream to be read. </param>
            <param name="encoding">The character encoding to use. </param>
            <param name="detectEncodingFromByteOrderMarks">Indicates whether to look for byte order marks at the beginning of the file.</param>
        </member>
        <member name="M:SystemWrapper.IO.StreamReaderWrap.#ctor(System.String,System.Text.Encoding,System.Boolean)">
            <summary>
            Initializes a new instance of the StreamReader class for the specified file name, with the specified character encoding and byte order mark detection option. 
            </summary>
            <param name="path">The complete file path to be read.</param>
            <param name="encoding">The character encoding to use. </param>
            <param name="detectEncodingFromByteOrderMarks">Indicates whether to look for byte order marks at the beginning of the file.</param>
        </member>
        <member name="M:SystemWrapper.IO.StreamReaderWrap.Initialize(System.String,System.Text.Encoding,System.Boolean)">
            <summary>
            Initializes a new instance of the StreamReader class for the specified file name, with the specified character encoding and byte order mark detection option. 
            </summary>
            <param name="path">The complete file path to be read.</param>
            <param name="encoding">The character encoding to use. </param>
            <param name="detectEncodingFromByteOrderMarks">Indicates whether to look for byte order marks at the beginning of the file.</param>
        </member>
        <member name="M:SystemWrapper.IO.StreamReaderWrap.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Int32)">
            <summary>
            Initializes a new instance of the StreamReader class for the specified stream, with the specified character encoding and byte order mark detection option, and buffer size.
            </summary>
            <param name="stream">The stream to be read. </param>
            <param name="encoding">The character encoding to use. </param>
            <param name="detectEncodingFromByteOrderMarks">Indicates whether to look for byte order marks at the beginning of the file.</param>
            <param name="bufferSize">The minimum buffer size. </param>
        </member>
        <member name="M:SystemWrapper.IO.StreamReaderWrap.Initialize(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Int32)">
            <summary>
            Initializes a new instance of the StreamReader class for the specified stream, with the specified character encoding and byte order mark detection option, and buffer size.
            </summary>
            <param name="stream">The stream to be read. </param>
            <param name="encoding">The character encoding to use. </param>
            <param name="detectEncodingFromByteOrderMarks">Indicates whether to look for byte order marks at the beginning of the file.</param>
            <param name="bufferSize">The minimum buffer size. </param>
        </member>
        <member name="M:SystemWrapper.IO.StreamReaderWrap.#ctor(System.String,System.Text.Encoding,System.Boolean,System.Int32)">
            <summary>
            Initializes a new instance of the StreamReader class for the specified file name, with the specified character encoding and byte order mark detection option. 
            </summary>
            <param name="path">The complete file path to be read.</param>
            <param name="encoding">The character encoding to use. </param>
            <param name="detectEncodingFromByteOrderMarks">Indicates whether to look for byte order marks at the beginning of the file.</param>
            <param name="bufferSize">The minimum buffer size, in number of 16-bit characters.</param>
        </member>
        <member name="M:SystemWrapper.IO.StreamReaderWrap.Initialize(System.String,System.Text.Encoding,System.Boolean,System.Int32)">
            <summary>
            Initializes a new instance of the StreamReader class for the specified file name, with the specified character encoding and byte order mark detection option. 
            </summary>
            <param name="path">The complete file path to be read.</param>
            <param name="encoding">The character encoding to use. </param>
            <param name="detectEncodingFromByteOrderMarks">Indicates whether to look for byte order marks at the beginning of the file.</param>
            <param name="bufferSize">The minimum buffer size, in number of 16-bit characters.</param>
        </member>
        <member name="M:SystemWrapper.IO.StreamReaderWrap.Close">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.StreamReaderWrap.DiscardBufferedData">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.StreamReaderWrap.Peek">
            <summary>
            Returns the next available character but does not consume it. 
            </summary>
            <returns>An integer representing the next character to be read, or -1 if no more characters are available or the stream does not support seeking.</returns>
        </member>
        <member name="M:SystemWrapper.IO.StreamReaderWrap.Read">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.StreamReaderWrap.Read(System.Char[],System.Int32,System.Int32)">
            <summary>
            Reads a maximum of count characters from the current stream into buffer, beginning at index. 
            </summary>
            <param name="buffer">When this method returns, contains the specified character array with the values between index and (index + count - 1) replaced by the characters read from the current source.</param>
            <param name="index">The index of buffer at which to begin writing.</param>
            <param name="count">The maximum number of characters to read. </param>
            <returns>The number of characters that have been read, or 0 if at the end of the stream and no data was read. The number will be less than or equal to the count parameter, depending on whether the data is available within the stream.</returns>
        </member>
        <member name="M:SystemWrapper.IO.StreamReaderWrap.ReadBlock(System.Char[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.StreamReaderWrap.ReadLine">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.StreamReaderWrap.ReadToEnd">
            <summary>
            Reads the stream from the current position to the end of the stream.
            </summary>
            <returns>The rest of the stream as a string, from the current position to the end. If the current position is at the end of the stream, returns the empty string("").</returns>
        </member>
        <member name="M:SystemWrapper.IO.StreamReaderWrap.Synchronized(SystemInterface.IO.ITextReader)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.StreamReaderWrap.Dispose">
            <inheritdoc />
        </member>
        <member name="P:SystemWrapper.IO.StreamReaderWrap.BaseStream">
            <inheritdoc />
        </member>
        <member name="P:SystemWrapper.IO.StreamReaderWrap.CurrentEncoding">
            <inheritdoc />
        </member>
        <member name="P:SystemWrapper.IO.StreamReaderWrap.EndOfStream">
            <inheritdoc />
        </member>
        <member name="P:SystemWrapper.IO.StreamReaderWrap.StreamReaderInstance">
            <inheritdoc />
        </member>
        <member name="P:SystemWrapper.IO.StreamReaderWrap.TextReaderInstance">
            <inheritdoc />
        </member>
        <member name="T:SystemWrapper.IO.BinaryReaderWrap">
            <summary>
            Wrapper for <see cref="T:System.IO.BinaryReader"/> class.
            </summary>
        </member>
        <member name="M:SystemWrapper.IO.BinaryReaderWrap.#ctor">
            <summary>
            Creates an uninitialized instance of the <see cref="T:SystemWrapper.IO.BinaryReaderWrap"/> class on the specified path. 
            </summary>
        </member>
        <member name="M:SystemWrapper.IO.BinaryReaderWrap.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the <see cref="T:SystemWrapper.IO.BinaryReaderWrap"/> class on the specified path. 
            </summary>
            <param name="reader">The <see cref="T:System.IO.BinaryReader"/> object.</param>
        </member>
        <member name="M:SystemWrapper.IO.BinaryReaderWrap.Initialize(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the <see cref="T:SystemWrapper.IO.BinaryReaderWrap"/> class on the specified path. 
            </summary>
            <param name="reader">The <see cref="T:System.IO.BinaryReader"/> object.</param>
        </member>
        <member name="M:SystemWrapper.IO.BinaryReaderWrap.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the BinaryReader class based on the supplied stream and using UTF8Encoding. 
            </summary>
            <param name="input">A <see cref="T:System.IO.Stream"/> object.</param>
        </member>
        <member name="M:SystemWrapper.IO.BinaryReaderWrap.Initialize(System.IO.Stream)">
            <summary>
            Initializes a new instance of the BinaryReader class based on the supplied stream and using UTF8Encoding. 
            </summary>
            <param name="input">A <see cref="T:System.IO.Stream"/> object.</param>
        </member>
        <member name="M:SystemWrapper.IO.BinaryReaderWrap.#ctor(SystemInterface.IO.IStream)">
            <summary>
            Initializes a new instance of the BinaryReader class based on the supplied stream and using UTF8Encoding. 
            </summary>
            <param name="input">A <see cref="T:System.IO.Stream"/> object.</param>
        </member>
        <member name="M:SystemWrapper.IO.BinaryReaderWrap.Initialize(SystemInterface.IO.IStream)">
            <summary>
            Initializes a new instance of the BinaryReader class based on the supplied stream and using UTF8Encoding. 
            </summary>
            <param name="input">A <see cref="T:System.IO.Stream"/> object.</param>
        </member>
        <member name="M:SystemWrapper.IO.BinaryReaderWrap.#ctor(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Initializes a new instance of the BinaryReader class based on the supplied stream and a specific character encoding.
            </summary>
            <param name="stream">The supplied stream.</param>
            <param name="encoding">The character encoding.</param>
        </member>
        <member name="M:SystemWrapper.IO.BinaryReaderWrap.Initialize(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Initializes a new instance of the BinaryReader class based on the supplied stream and a specific character encoding.
            </summary>
            <param name="stream">The supplied stream.</param>
            <param name="encoding">The character encoding.</param>
        </member>
        <member name="M:SystemWrapper.IO.BinaryReaderWrap.#ctor(SystemInterface.IO.IStream,System.Text.Encoding)">
            <summary>
            Initializes a new instance of the BinaryReader class based on the supplied stream and a specific character encoding.
            </summary>
            <param name="stream">The supplied stream.</param>
            <param name="encoding">The character encoding.</param>
        </member>
        <member name="M:SystemWrapper.IO.BinaryReaderWrap.Initialize(SystemInterface.IO.IStream,System.Text.Encoding)">
            <summary>
            Initializes a new instance of the BinaryReader class based on the supplied stream and a specific character encoding.
            </summary>
            <param name="stream">The supplied stream.</param>
            <param name="encoding">The character encoding.</param>
        </member>
        <member name="M:SystemWrapper.IO.BinaryReaderWrap.Close">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.BinaryReaderWrap.ReadChars(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.BinaryReaderWrap.ReadDecimal">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.BinaryReaderWrap.ReadDouble">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.BinaryReaderWrap.ReadInt16">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.BinaryReaderWrap.ReadInt32">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.BinaryReaderWrap.ReadInt64">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.BinaryReaderWrap.ReadChar">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.BinaryReaderWrap.PeekChar">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.BinaryReaderWrap.Read">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.BinaryReaderWrap.Read(System.Byte[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.BinaryReaderWrap.Read(System.Char[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.BinaryReaderWrap.ReadBoolean">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.BinaryReaderWrap.ReadByte">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.BinaryReaderWrap.ReadBytes(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.BinaryReaderWrap.ReadSByte">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.BinaryReaderWrap.ReadSingle">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.BinaryReaderWrap.ReadString">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.BinaryReaderWrap.ReadUInt16">
            <inheritdoc />        
        </member>
        <member name="M:SystemWrapper.IO.BinaryReaderWrap.ReadUInt32">
            <inheritdoc />        
        </member>
        <member name="M:SystemWrapper.IO.BinaryReaderWrap.ReadUInt64">
            <inheritdoc />        
        </member>
        <member name="M:SystemWrapper.IO.BinaryReaderWrap.Dispose">
            <inheritdoc />
        </member>
        <member name="P:SystemWrapper.IO.BinaryReaderWrap.BaseStream">
            <inheritdoc />
        </member>
        <member name="P:SystemWrapper.IO.BinaryReaderWrap.BinaryReaderInstance">
            <inheritdoc />
        </member>
        <member name="T:SystemWrapper.IO.Compression.DeflateStreamWrap">
            <summary>
            Description of DeflateStreamWrap.
            </summary>
        </member>
        <member name="M:SystemWrapper.IO.Compression.DeflateStreamWrap.#ctor">
            <summary>
            Creates an uninitialized version of DeflateStreamWrap
            </summary>
        </member>
        <member name="M:SystemWrapper.IO.Compression.DeflateStreamWrap.#ctor(SystemInterface.IO.IStream,System.IO.Compression.CompressionMode)">
            <summary>
            Initializes a new instance of the <see cref="T:SystemWrapper.IO.Compression.DeflateStreamWrap"/> class. 
            </summary>
            <param name="stream">The stream to compress or decompress.</param>
            <param name="mode">One of the CompressionMode values that indicates the action to take.</param>
        </member>
        <member name="M:SystemWrapper.IO.Compression.DeflateStreamWrap.Initialize(SystemInterface.IO.IStream,System.IO.Compression.CompressionMode)">
            <summary>
            Initializes a new instance of the <see cref="T:SystemWrapper.IO.Compression.DeflateStreamWrap"/> class. 
            </summary>
            <param name="stream">The stream to compress or decompress.</param>
            <param name="mode">One of the CompressionMode values that indicates the action to take.</param>
        </member>
        <member name="M:SystemWrapper.IO.Compression.DeflateStreamWrap.Read(System.Byte[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.Compression.DeflateStreamWrap.Write(System.Byte[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.Compression.DeflateStreamWrap.Flush">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.Compression.DeflateStreamWrap.Close">
            <inheritdoc />
        </member>
        <member name="P:SystemWrapper.IO.Compression.DeflateStreamWrap.DeflateStreamInstance">
            <inheritdoc />
        </member>
        <member name="T:SystemWrapper.Diagnostics.ProcessStartInfoWrap">
            <summary>
             Wrapper for <see cref="T:System.Diagnostics.ProcessStartInfo"/> class.
            </summary>
        </member>
        <member name="M:SystemWrapper.Diagnostics.ProcessStartInfoWrap.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SystemWrapper.Diagnostics.ProcessStartInfoWrap"/> class without specifying a file name with which to start the process. 
            </summary>
        </member>
        <member name="M:SystemWrapper.Diagnostics.ProcessStartInfoWrap.Initialize">
            <summary>
            Initializes a new instance of the <see cref="T:SystemWrapper.Diagnostics.ProcessStartInfoWrap"/> class without specifying a file name with which to start the process. 
            </summary>
        </member>
        <member name="M:SystemWrapper.Diagnostics.ProcessStartInfoWrap.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SystemWrapper.Diagnostics.ProcessStartInfoWrap"/> class and specifies a file name such as an application or document with which to start the process.
            </summary>
        </member>
        <member name="M:SystemWrapper.Diagnostics.ProcessStartInfoWrap.Initialize(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SystemWrapper.Diagnostics.ProcessStartInfoWrap"/> class and specifies a file name such as an application or document with which to start the process.
            </summary>
        </member>
        <member name="M:SystemWrapper.Diagnostics.ProcessStartInfoWrap.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SystemWrapper.Diagnostics.ProcessStartInfoWrap"/> class, specifies an application file name with which to start the process, and specifies a set of command-line arguments to pass to the application.
            </summary>
        </member>
        <member name="M:SystemWrapper.Diagnostics.ProcessStartInfoWrap.Initialize(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SystemWrapper.Diagnostics.ProcessStartInfoWrap"/> class, specifies an application file name with which to start the process, and specifies a set of command-line arguments to pass to the application.
            </summary>
        </member>
        <member name="M:SystemWrapper.Diagnostics.ProcessStartInfoWrap.#ctor(System.Diagnostics.ProcessStartInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:SystemWrapper.Diagnostics.ProcessStartInfoWrap"/> class with providing ProcessStartInfo instance. 
            </summary>
            <param name="processStartInfo">ProcessStartInfo instance</param>
        </member>
        <member name="M:SystemWrapper.Diagnostics.ProcessStartInfoWrap.Initialize(System.Diagnostics.ProcessStartInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:SystemWrapper.Diagnostics.ProcessStartInfoWrap"/> class with providing ProcessStartInfo instance. 
            </summary>
            <param name="processStartInfo">ProcessStartInfo instance</param>
        </member>
        <member name="P:SystemWrapper.Diagnostics.ProcessStartInfoWrap.Arguments">
            <inheritdoc />
        </member>
        <member name="P:SystemWrapper.Diagnostics.ProcessStartInfoWrap.FileName">
            <inheritdoc />
        </member>
        <member name="P:SystemWrapper.Diagnostics.ProcessStartInfoWrap.ProcessStartInfoInstance">
            <inheritdoc />
        </member>
        <member name="P:SystemWrapper.Diagnostics.ProcessStartInfoWrap.UseShellExecute">
            <inheritdoc />
        </member>
        <member name="P:SystemWrapper.Diagnostics.ProcessStartInfoWrap.RedirectStandardOutput">
            <inheritdoc />
        </member>
        <member name="P:SystemWrapper.Diagnostics.ProcessStartInfoWrap.RedirectStandardError">
            <inheritdoc />
        </member>
        <member name="P:SystemWrapper.Diagnostics.ProcessStartInfoWrap.CreateNoWindow">
            <inheritdoc />
        </member>
        <member name="P:SystemWrapper.Diagnostics.ProcessStartInfoWrap.WorkingDirectory">
            <inheritdoc />
        </member>
        <member name="T:SystemWrapper.Reflection.AssemblyNameWrap">
            <summary>
            Wrapper for <see cref="T:System.Reflection.AssemblyName"/> class.
            </summary>
        </member>
        <member name="M:SystemWrapper.Reflection.AssemblyNameWrap.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SystemWrapper.Reflection.AssemblyNameWrap"/> class. 
            </summary>
        </member>
        <member name="M:SystemWrapper.Reflection.AssemblyNameWrap.Initialize">
            <summary>
            Initializes a new instance of the <see cref="T:SystemWrapper.Reflection.AssemblyNameWrap"/> class. 
            </summary>
        </member>
        <member name="M:SystemWrapper.Reflection.AssemblyNameWrap.#ctor(System.Reflection.AssemblyName)">
            <summary>
            Initializes a new instance of the <see cref="T:SystemWrapper.Reflection.AssemblyNameWrap"/> class. 
            </summary>
            <param name="assemblyName">AssemblyName object.</param>
        </member>
        <member name="M:SystemWrapper.Reflection.AssemblyNameWrap.Initialize(System.Reflection.AssemblyName)">
            <summary>
            Initializes a new instance of the <see cref="T:SystemWrapper.Reflection.AssemblyNameWrap"/> class. 
            </summary>
            <param name="assemblyName">AssemblyName object.</param>
        </member>
        <member name="M:SystemWrapper.Reflection.AssemblyNameWrap.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SystemWrapper.Reflection.AssemblyNameWrap"/> class. 
            </summary>
            <param name="assemblyName">The display name of the assembly, as returned by the FullName property.</param>
        </member>
        <member name="M:SystemWrapper.Reflection.AssemblyNameWrap.Initialize(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SystemWrapper.Reflection.AssemblyNameWrap"/> class. 
            </summary>
            <param name="assemblyName">The display name of the assembly, as returned by the FullName property.</param>
        </member>
        <member name="M:SystemWrapper.Reflection.AssemblyNameWrap.Clone">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.Reflection.AssemblyNameWrap.GetAssemblyName(System.String)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.Reflection.AssemblyNameWrap.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.Reflection.AssemblyNameWrap.GetPublicKey">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.Reflection.AssemblyNameWrap.GetPublicKeyToken">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.Reflection.AssemblyNameWrap.OnDeserialization(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.Reflection.AssemblyNameWrap.ReferenceMatchesDefinition(SystemInterface.Reflection.IAssemblyName,SystemInterface.Reflection.IAssemblyName)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.Reflection.AssemblyNameWrap.SetPublicKey(System.Byte[])">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.Reflection.AssemblyNameWrap.SetPublicKeyToken(System.Byte[])">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.Reflection.AssemblyNameWrap.ToString">
            <inheritdoc />
        </member>
        <member name="P:SystemWrapper.Reflection.AssemblyNameWrap.AssemblyNameInstance">
            <inheritdoc />
        </member>
        <member name="P:SystemWrapper.Reflection.AssemblyNameWrap.CodeBase">
            <inheritdoc />
        </member>
        <member name="P:SystemWrapper.Reflection.AssemblyNameWrap.CultureInfo">
            <inheritdoc />
        </member>
        <member name="P:SystemWrapper.Reflection.AssemblyNameWrap.EscapedCodeBase">
            <inheritdoc />
        </member>
        <member name="P:SystemWrapper.Reflection.AssemblyNameWrap.Flags">
            <inheritdoc />
        </member>
        <member name="P:SystemWrapper.Reflection.AssemblyNameWrap.FullName">
            <inheritdoc />
        </member>
        <member name="P:SystemWrapper.Reflection.AssemblyNameWrap.HashAlgorithm">
            <inheritdoc />
        </member>
        <member name="P:SystemWrapper.Reflection.AssemblyNameWrap.KeyPair">
            <inheritdoc />
        </member>
        <member name="P:SystemWrapper.Reflection.AssemblyNameWrap.Name">
            <inheritdoc />
        </member>
        <member name="P:SystemWrapper.Reflection.AssemblyNameWrap.ProcessorArchitecture">
            <inheritdoc />
        </member>
        <member name="P:SystemWrapper.Reflection.AssemblyNameWrap.Version">
            <inheritdoc />
        </member>
        <member name="P:SystemWrapper.Reflection.AssemblyNameWrap.VersionCompatibility">
            <inheritdoc />
        </member>
        <member name="T:SystemWrapper.Microsoft.Win32.SafeHandles.SafeFileHandleWrap">
            <summary>
            Wrapper for <see cref="T:Microsoft.Win32.SafeHandles.SafeFileHandle"/> class.
            </summary>
        </member>
        <member name="M:SystemWrapper.Microsoft.Win32.SafeHandles.SafeFileHandleWrap.#ctor(Microsoft.Win32.SafeHandles.SafeFileHandle)">
            <summary>
            Initializes a new instance of the <see cref="T:SystemWrapper.Microsoft.Win32.SafeHandles.SafeFileHandleWrap"/> class on the specified path. 
            </summary>
            <param name="safeFileHandle">A <see cref="T:Microsoft.Win32.SafeHandles.SafeFileHandle"/> object.</param>
        </member>
        <member name="M:SystemWrapper.Microsoft.Win32.SafeHandles.SafeFileHandleWrap.Initialize(Microsoft.Win32.SafeHandles.SafeFileHandle)">
            <summary>
            Initializes a new instance of the <see cref="T:SystemWrapper.Microsoft.Win32.SafeHandles.SafeFileHandleWrap"/> class on the specified path. 
            </summary>
            <param name="safeFileHandle">A <see cref="T:Microsoft.Win32.SafeHandles.SafeFileHandle"/> object.</param>
        </member>
        <member name="M:SystemWrapper.Microsoft.Win32.SafeHandles.SafeFileHandleWrap.#ctor(System.IntPtr,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:SystemWrapper.Microsoft.Win32.SafeHandles.SafeFileHandleWrap"/> class on the specified path. 
            </summary>
            <param name="preexistingHandle">An IntPtr object that represents the pre-existing handle to use.</param>
            <param name="ownsHandle"> true to reliably release the handle during the finalization phase; false to prevent reliable release (not recommended).</param>
        </member>
        <member name="M:SystemWrapper.Microsoft.Win32.SafeHandles.SafeFileHandleWrap.Initialize(System.IntPtr,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:SystemWrapper.Microsoft.Win32.SafeHandles.SafeFileHandleWrap"/> class on the specified path. 
            </summary>
            <param name="preexistingHandle">An IntPtr object that represents the pre-existing handle to use.</param>
            <param name="ownsHandle"> true to reliably release the handle during the finalization phase; false to prevent reliable release (not recommended).</param>
        </member>
        <member name="M:SystemWrapper.Microsoft.Win32.SafeHandles.SafeFileHandleWrap.Close">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.Microsoft.Win32.SafeHandles.SafeFileHandleWrap.DangerousAddRef(System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.Microsoft.Win32.SafeHandles.SafeFileHandleWrap.DangerousGetHandle">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.Microsoft.Win32.SafeHandles.SafeFileHandleWrap.DangerousRelease">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.Microsoft.Win32.SafeHandles.SafeFileHandleWrap.SetHandleAsInvalid">
            <inheritdoc />
        </member>
        <member name="P:SystemWrapper.Microsoft.Win32.SafeHandles.SafeFileHandleWrap.IsClosed">
            <inheritdoc />
        </member>
        <member name="P:SystemWrapper.Microsoft.Win32.SafeHandles.SafeFileHandleWrap.IsInvalid">
            <inheritdoc />
        </member>
        <member name="P:SystemWrapper.Microsoft.Win32.SafeHandles.SafeFileHandleWrap.SafeFileHandleInstance">
            <inheritdoc />
        </member>
        <member name="T:SystemWrapper.IO.FileInfoWrap">
            <summary>
            Wrapper for <see cref="T:System.IO.FileInfo"/> class.
            </summary>
        </member>
        <member name="M:SystemWrapper.IO.FileInfoWrap.#ctor(System.IO.FileInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:SystemWrapper.IO.FileInfoWrap"/> class on the specified path. 
            </summary>
            <param name="fileInfo">A <see cref="T:System.IO.FileInfo"/> object.</param>
        </member>
        <member name="M:SystemWrapper.IO.FileInfoWrap.Initialize(System.IO.FileInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:SystemWrapper.IO.FileInfoWrap"/> class on the specified path. 
            </summary>
            <param name="fileInfo">A <see cref="T:System.IO.FileInfo"/> object.</param>
        </member>
        <member name="M:SystemWrapper.IO.FileInfoWrap.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SystemWrapper.IO.FileInfoWrap"/> class on the specified path. 
            </summary>
            <param name="fileName">The fully qualified name of the new file, or the relative file name.</param>
        </member>
        <member name="M:SystemWrapper.IO.FileInfoWrap.Initialize(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SystemWrapper.IO.FileInfoWrap"/> class on the specified path. 
            </summary>
            <param name="fileName">The fully qualified name of the new file, or the relative file name.</param>
        </member>
        <member name="M:SystemWrapper.IO.FileInfoWrap.AppendText">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.FileInfoWrap.Decrypt">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.FileInfoWrap.Delete">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.FileInfoWrap.Encrypt">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.FileInfoWrap.CopyTo(System.String)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.FileInfoWrap.CopyTo(System.String,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.FileInfoWrap.Create">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.FileInfoWrap.CreateText">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.FileInfoWrap.GetAccessControl">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.FileInfoWrap.GetAccessControl(System.Security.AccessControl.AccessControlSections)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.FileInfoWrap.MoveTo(System.String)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.FileInfoWrap.Open(System.IO.FileMode)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.FileInfoWrap.Open(System.IO.FileMode,System.IO.FileAccess)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.FileInfoWrap.Open(System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.FileInfoWrap.OpenRead">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.FileInfoWrap.OpenText">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.FileInfoWrap.OpenWrite">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.FileInfoWrap.Refresh">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.FileInfoWrap.Replace(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.FileInfoWrap.Replace(System.String,System.String,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.FileInfoWrap.SetAccessControl(SystemInterface.Security.AccessControl.IFileSecurity)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.FileInfoWrap.ToString">
            <inheritdoc />
        </member>
        <member name="P:SystemWrapper.IO.FileInfoWrap.Attributes">
            <inheritdoc />
        </member>
        <member name="P:SystemWrapper.IO.FileInfoWrap.CreationTime">
            <inheritdoc />
        </member>
        <member name="P:SystemWrapper.IO.FileInfoWrap.CreationTimeUtc">
            <inheritdoc />
        </member>
        <member name="P:SystemWrapper.IO.FileInfoWrap.Directory">
            <inheritdoc />	              
        </member>
        <member name="P:SystemWrapper.IO.FileInfoWrap.DirectoryName">
            <inheritdoc />
        </member>
        <member name="P:SystemWrapper.IO.FileInfoWrap.Exists">
            <inheritdoc />
        </member>
        <member name="P:SystemWrapper.IO.FileInfoWrap.Extension">
            <inheritdoc />
        </member>
        <member name="P:SystemWrapper.IO.FileInfoWrap.FileInfoInstance">
            <inheritdoc />
        </member>
        <member name="P:SystemWrapper.IO.FileInfoWrap.FullName">
            <inheritdoc />
        </member>
        <member name="P:SystemWrapper.IO.FileInfoWrap.IsReadOnly">
            <inheritdoc />
        </member>
        <member name="P:SystemWrapper.IO.FileInfoWrap.LastAccessTime">
            <inheritdoc />
        </member>
        <member name="P:SystemWrapper.IO.FileInfoWrap.LastAccessTimeUtc">
            <inheritdoc />
        </member>
        <member name="P:SystemWrapper.IO.FileInfoWrap.LastWriteTime">
            <inheritdoc />
        </member>
        <member name="P:SystemWrapper.IO.FileInfoWrap.LastWriteTimeUtc">
            <inheritdoc />
        </member>
        <member name="P:SystemWrapper.IO.FileInfoWrap.Length">
            <inheritdoc />
        </member>
        <member name="P:SystemWrapper.IO.FileInfoWrap.Name">
            <inheritdoc />
        </member>
        <member name="T:SystemWrapper.Security.AccessControl.DirectorySecurityWrap">
            <summary>
            Wrapper for <see cref="T:System.Security.AccessControl.DirectorySecurity"/> class.
            </summary>
        </member>
        <member name="M:SystemWrapper.Security.AccessControl.DirectorySecurityWrap.#ctor(System.Security.AccessControl.DirectorySecurity)">
            <summary>
            Initializes a new instance of the <see cref="T:SystemWrapper.Security.AccessControl.DirectorySecurityWrap"/> class on the specified path. 
            </summary>
            <param name="directorySecurity">A <see cref="T:System.Security.AccessControl.DirectorySecurity"/> object.</param>
        </member>
        <member name="M:SystemWrapper.Security.AccessControl.DirectorySecurityWrap.Initialize(System.Security.AccessControl.DirectorySecurity)">
            <summary>
            Initializes a new instance of the <see cref="T:SystemWrapper.Security.AccessControl.DirectorySecurityWrap"/> class on the specified path. 
            </summary>
            <param name="dirSecurity">A <see cref="T:System.Security.AccessControl.DirectorySecurity"/> object.</param>
        </member>
        <member name="P:SystemWrapper.Security.AccessControl.DirectorySecurityWrap.DirectorySecurityInstance">
            <inheritdoc />
        </member>
        <member name="T:SystemWrapper.IO.DirectoryWrap">
            <summary>
            Wrapper for <see cref="T:System.IO.Directory"/> class.
            </summary>
        </member>
        <member name="M:SystemWrapper.IO.DirectoryWrap.CreateDirectory(System.String)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.DirectoryWrap.CreateDirectory(System.String,SystemInterface.Security.AccessControl.IDirectorySecurity)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.DirectoryWrap.Delete(System.String)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.DirectoryWrap.Delete(System.String,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.DirectoryWrap.Exists(System.String)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.DirectoryWrap.GetAccessControl(System.String)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.DirectoryWrap.GetAccessControl(System.String,System.Security.AccessControl.AccessControlSections)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.DirectoryWrap.GetCreationTime(System.String)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.DirectoryWrap.GetCreationTimeUtc(System.String)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.DirectoryWrap.GetCurrentDirectory">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.DirectoryWrap.GetDirectories(System.String)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.DirectoryWrap.GetDirectories(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.DirectoryWrap.GetDirectories(System.String,System.String,System.IO.SearchOption)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.DirectoryWrap.GetDirectoryRoot(System.String)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.DirectoryWrap.GetFiles(System.String)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.DirectoryWrap.GetFiles(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.DirectoryWrap.GetFiles(System.String,System.String,System.IO.SearchOption)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.DirectoryWrap.GetFileSystemEntries(System.String)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.DirectoryWrap.GetFileSystemEntries(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.DirectoryWrap.GetLastAccessTime(System.String)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.DirectoryWrap.GetLastAccessTimeUtc(System.String)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.DirectoryWrap.GetLastWriteTime(System.String)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.DirectoryWrap.GetLastWriteTimeUtc(System.String)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.DirectoryWrap.GetLogicalDrives">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.DirectoryWrap.GetParent(System.String)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.DirectoryWrap.Move(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.DirectoryWrap.SetAccessControl(System.String,SystemInterface.Security.AccessControl.IDirectorySecurity)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.DirectoryWrap.SetCreationTime(System.String,SystemInterface.IDateTime)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.DirectoryWrap.SetCreationTimeUtc(System.String,SystemInterface.IDateTime)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.DirectoryWrap.SetCurrentDirectory(System.String)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.DirectoryWrap.SetLastAccessTime(System.String,SystemInterface.IDateTime)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.DirectoryWrap.SetLastAccessTimeUtc(System.String,SystemInterface.IDateTime)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.DirectoryWrap.SetLastWriteTime(System.String,SystemInterface.IDateTime)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.DirectoryWrap.SetLastWriteTimeUtc(System.String,SystemInterface.IDateTime)">
            <inheritdoc />
        </member>
        <member name="T:SystemWrapper.DateTimeWrap">
            <summary>
            Wrapper for <see cref="T:System.Version"/> class.
            </summary>
        </member>
        <member name="M:SystemWrapper.DateTimeWrap.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SystemWrapper.DateTimeWrap"/> class. 
            </summary>
        </member>
        <member name="M:SystemWrapper.DateTimeWrap.Initialize">
            <summary>
            Initializes a new instance of the <see cref="T:SystemWrapper.DateTimeWrap"/> class. 
            </summary>
        </member>
        <member name="M:SystemWrapper.DateTimeWrap.#ctor(System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:SystemWrapper.DateTimeWrap"/> class. 
            </summary>
            <param name="dateTime">A DateTime object.</param>
        </member>
        <member name="M:SystemWrapper.DateTimeWrap.Initialize(System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:SystemWrapper.DateTimeWrap"/> class. 
            </summary>
            <param name="dateTime">A DateTime object.</param>
        </member>
        <member name="M:SystemWrapper.DateTimeWrap.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of the DateTimeWrap class to a specified number of ticks.
            </summary>
            <param name="ticks">A date and time expressed in 100-nanosecond units. </param>
        </member>
        <member name="M:SystemWrapper.DateTimeWrap.Initialize(System.Int64)">
            <summary>
            Initializes a new instance of the DateTimeWrap class to a specified number of ticks.
            </summary>
            <param name="ticks">A date and time expressed in 100-nanosecond units. </param>
        </member>
        <member name="M:SystemWrapper.DateTimeWrap.#ctor(System.Int64,System.DateTimeKind)">
            <summary>
            Initializes a new instance of the DateTimeWrap class to a specified number of ticks and to Coordinated Universal Time (UTC) or local time.
            </summary>
            <param name="ticks">A date and time expressed in 100-nanosecond units. </param>
            <param name="kind">One of the DateTimeKind values that indicates whether ticks specifies a local time, Coordinated Universal Time (UTC), or neither.</param>
        </member>
        <member name="M:SystemWrapper.DateTimeWrap.Initialize(System.Int64,System.DateTimeKind)">
            <summary>
            Initializes a new instance of the DateTimeWrap class to a specified number of ticks and to Coordinated Universal Time (UTC) or local time.
            </summary>
            <param name="ticks">A date and time expressed in 100-nanosecond units. </param>
            <param name="kind">One of the DateTimeKind values that indicates whether ticks specifies a local time, Coordinated Universal Time (UTC), or neither.</param>
        </member>
        <member name="M:SystemWrapper.DateTimeWrap.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the DateTimeWrap class to the specified year, month, and day.
            </summary>
            <param name="year">The year (1 through 9999). </param>
            <param name="month">The month (1 through 12). </param>
            <param name="day">The day (1 through the number of days in month). </param>
        </member>
        <member name="M:SystemWrapper.DateTimeWrap.Initialize(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the DateTimeWrap class to the specified year, month, and day.
            </summary>
            <param name="year">The year (1 through 9999). </param>
            <param name="month">The month (1 through 12). </param>
            <param name="day">The day (1 through the number of days in month). </param>
        </member>
        <member name="M:SystemWrapper.DateTimeWrap.#ctor(System.Int32,System.Int32,System.Int32,System.Globalization.Calendar)">
            <summary>
            Initializes a new instance of the DateTimeWrap class to the specified year, month, and day for the specified calendar.
            </summary>
            <param name="year">The year (1 through 9999). </param>
            <param name="month">The month (1 through 12). </param>
            <param name="day">The day (1 through the number of days in month). </param>
            <param name="calendar">The Calendar that applies to this DateTimeWrap. </param>
        </member>
        <member name="M:SystemWrapper.DateTimeWrap.Initialize(System.Int32,System.Int32,System.Int32,System.Globalization.Calendar)">
            <summary>
            Initializes a new instance of the DateTimeWrap class to the specified year, month, and day for the specified calendar.
            </summary>
            <param name="year">The year (1 through 9999). </param>
            <param name="month">The month (1 through 12). </param>
            <param name="day">The day (1 through the number of days in month). </param>
            <param name="calendar">The Calendar that applies to this DateTimeWrap. </param>
        </member>
        <member name="M:SystemWrapper.DateTimeWrap.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the DateTimeWrap class to the specified year, month, day, hour, minute, and second.
            </summary>
            <param name="year">The year (1 through 9999). </param>
            <param name="month">The month (1 through 12). </param>
            <param name="day">The day (1 through the number of days in month). </param>
            <param name="hour">The hours (0 through 23). </param>
            <param name="minute">The minutes (0 through 59). </param>
            <param name="second">The seconds (0 through 59). </param>
        </member>
        <member name="M:SystemWrapper.DateTimeWrap.Initialize(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the DateTimeWrap class to the specified year, month, day, hour, minute, and second.
            </summary>
            <param name="year">The year (1 through 9999). </param>
            <param name="month">The month (1 through 12). </param>
            <param name="day">The day (1 through the number of days in month). </param>
            <param name="hour">The hours (0 through 23). </param>
            <param name="minute">The minutes (0 through 59). </param>
            <param name="second">The seconds (0 through 59). </param>
        </member>
        <member name="M:SystemWrapper.DateTimeWrap.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.DateTimeKind)">
            <summary>
            Initializes a new instance of the DateTimeWrap class to the specified year, month, day, hour, minute, second, and Coordinated Universal Time (UTC) or local time.
            </summary>
            <param name="year">The year (1 through 9999). </param>
            <param name="month">The month (1 through 12). </param>
            <param name="day">The day (1 through the number of days in month). </param>
            <param name="hour">The hours (0 through 23). </param>
            <param name="minute">The minutes (0 through 59). </param>
            <param name="second">The seconds (0 through 59). </param>
            <param name="kind">One of the DateTimeKind values that indicates whether year, month, day, hour, minute and second specify a local time, Coordinated Universal Time (UTC), or neither.</param>
        </member>
        <member name="M:SystemWrapper.DateTimeWrap.Initialize(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.DateTimeKind)">
            <summary>
            Initializes a new instance of the DateTimeWrap class to the specified year, month, day, hour, minute, second, and Coordinated Universal Time (UTC) or local time.
            </summary>
            <param name="year">The year (1 through 9999). </param>
            <param name="month">The month (1 through 12). </param>
            <param name="day">The day (1 through the number of days in month). </param>
            <param name="hour">The hours (0 through 23). </param>
            <param name="minute">The minutes (0 through 59). </param>
            <param name="second">The seconds (0 through 59). </param>
            <param name="kind">One of the DateTimeKind values that indicates whether year, month, day, hour, minute and second specify a local time, Coordinated Universal Time (UTC), or neither.</param>
        </member>
        <member name="M:SystemWrapper.DateTimeWrap.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Globalization.Calendar)">
            <summary>
            Initializes a new instance of the DateTimeWrap class to the specified year, month, day, hour, minute, and second for the specified calendar.
            </summary>
            <param name="year">The year (1 through 9999). </param>
            <param name="month">The month (1 through 12). </param>
            <param name="day">The day (1 through the number of days in month). </param>
            <param name="hour">The hours (0 through 23). </param>
            <param name="minute">The minutes (0 through 59). </param>
            <param name="second">The seconds (0 through 59). </param>
            <param name="calendar">The Calendar that applies to this DateTimeWrap. </param>
        </member>
        <member name="M:SystemWrapper.DateTimeWrap.Initialize(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Globalization.Calendar)">
            <summary>
            Initializes a new instance of the DateTimeWrap class to the specified year, month, day, hour, minute, and second for the specified calendar.
            </summary>
            <param name="year">The year (1 through 9999). </param>
            <param name="month">The month (1 through 12). </param>
            <param name="day">The day (1 through the number of days in month). </param>
            <param name="hour">The hours (0 through 23). </param>
            <param name="minute">The minutes (0 through 59). </param>
            <param name="second">The seconds (0 through 59). </param>
            <param name="calendar">The Calendar that applies to this DateTimeWrap. </param>
        </member>
        <member name="M:SystemWrapper.DateTimeWrap.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the DateTimeWrap class to the specified year, month, day, hour, minute, second, and millisecond.
            </summary>
            <param name="year">The year (1 through 9999). </param>
            <param name="month">The month (1 through 12). </param>
            <param name="day">The day (1 through the number of days in month). </param>
            <param name="hour">The hours (0 through 23). </param>
            <param name="minute">The minutes (0 through 59). </param>
            <param name="second">The seconds (0 through 59). </param>
            <param name="millisecond">The milliseconds (0 through 999). </param>
        </member>
        <member name="M:SystemWrapper.DateTimeWrap.Initialize(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the DateTimeWrap class to the specified year, month, day, hour, minute, second, and millisecond.
            </summary>
            <param name="year">The year (1 through 9999). </param>
            <param name="month">The month (1 through 12). </param>
            <param name="day">The day (1 through the number of days in month). </param>
            <param name="hour">The hours (0 through 23). </param>
            <param name="minute">The minutes (0 through 59). </param>
            <param name="second">The seconds (0 through 59). </param>
            <param name="millisecond">The milliseconds (0 through 999). </param>
        </member>
        <member name="M:SystemWrapper.DateTimeWrap.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.DateTimeKind)">
            <summary>
            Initializes a new instance of the DateTimeWrap class to the specified year, month, day, hour, minute, second, millisecond, and Coordinated Universal Time (UTC) or local time.
            </summary>
            <param name="year">The year (1 through 9999). </param>
            <param name="month">The month (1 through 12). </param>
            <param name="day">The day (1 through the number of days in month). </param>
            <param name="hour">The hours (0 through 23). </param>
            <param name="minute">The minutes (0 through 59). </param>
            <param name="second">The seconds (0 through 59). </param>
            <param name="millisecond">The milliseconds (0 through 999). </param>
            <param name="kind">One of the DateTimeKind values that indicates whether year, month, day, hour, minute, second, and millisecond specify a local time, Coordinated Universal Time (UTC), or neither.</param>
        </member>
        <member name="M:SystemWrapper.DateTimeWrap.Initialize(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.DateTimeKind)">
            <summary>
            Initializes a new instance of the DateTimeWrap class to the specified year, month, day, hour, minute, second, millisecond, and Coordinated Universal Time (UTC) or local time.
            </summary>
            <param name="year">The year (1 through 9999). </param>
            <param name="month">The month (1 through 12). </param>
            <param name="day">The day (1 through the number of days in month). </param>
            <param name="hour">The hours (0 through 23). </param>
            <param name="minute">The minutes (0 through 59). </param>
            <param name="second">The seconds (0 through 59). </param>
            <param name="millisecond">The milliseconds (0 through 999). </param>
            <param name="kind">One of the DateTimeKind values that indicates whether year, month, day, hour, minute, second, and millisecond specify a local time, Coordinated Universal Time (UTC), or neither.</param>
        </member>
        <member name="M:SystemWrapper.DateTimeWrap.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Globalization.Calendar)">
            <summary>
            Initializes a new instance of the DateTimeWrap class to the specified year, month, day, hour, minute, second, millisecond for the specified calendar.
            </summary>
            <param name="year">The year (1 through 9999). </param>
            <param name="month">The month (1 through 12). </param>
            <param name="day">The day (1 through the number of days in month). </param>
            <param name="hour">The hours (0 through 23). </param>
            <param name="minute">The minutes (0 through 59). </param>
            <param name="second">The seconds (0 through 59). </param>
            <param name="millisecond">The milliseconds (0 through 999). </param>
            <param name="calendar">The Calendar that applies to this DateTimeWrap.</param>
        </member>
        <member name="M:SystemWrapper.DateTimeWrap.Initialize(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Globalization.Calendar)">
            <summary>
            Initializes a new instance of the DateTimeWrap class to the specified year, month, day, hour, minute, second, millisecond for the specified calendar.
            </summary>
            <param name="year">The year (1 through 9999). </param>
            <param name="month">The month (1 through 12). </param>
            <param name="day">The day (1 through the number of days in month). </param>
            <param name="hour">The hours (0 through 23). </param>
            <param name="minute">The minutes (0 through 59). </param>
            <param name="second">The seconds (0 through 59). </param>
            <param name="millisecond">The milliseconds (0 through 999). </param>
            <param name="calendar">The Calendar that applies to this DateTimeWrap.</param>
        </member>
        <member name="M:SystemWrapper.DateTimeWrap.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Globalization.Calendar,System.DateTimeKind)">
            <summary>
            Initializes a new instance of the DateTimeWrap class to the specified year, month, day, hour, minute, second, millisecond, and Coordinated Universal Time (UTC) or local time for the specified calendar.
            </summary>
            <param name="year">The year (1 through 9999). </param>
            <param name="month">The month (1 through 12). </param>
            <param name="day">The day (1 through the number of days in month). </param>
            <param name="hour">The hours (0 through 23). </param>
            <param name="minute">The minutes (0 through 59). </param>
            <param name="second">The seconds (0 through 59). </param>
            <param name="millisecond">The milliseconds (0 through 999). </param>
            <param name="calendar">The Calendar that applies to this DateTimeWrap.</param>
            <param name="kind">One of the DateTimeKind values that indicates whether year, month, day, hour, minute, second, and millisecond specify a local time, Coordinated Universal Time (UTC), or neither.</param>
        </member>
        <member name="M:SystemWrapper.DateTimeWrap.Initialize(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Globalization.Calendar,System.DateTimeKind)">
            <summary>
            Initializes a new instance of the DateTimeWrap class to the specified year, month, day, hour, minute, second, millisecond, and Coordinated Universal Time (UTC) or local time for the specified calendar.
            </summary>
            <param name="year">The year (1 through 9999). </param>
            <param name="month">The month (1 through 12). </param>
            <param name="day">The day (1 through the number of days in month). </param>
            <param name="hour">The hours (0 through 23). </param>
            <param name="minute">The minutes (0 through 59). </param>
            <param name="second">The seconds (0 through 59). </param>
            <param name="millisecond">The milliseconds (0 through 999). </param>
            <param name="calendar">The Calendar that applies to this DateTimeWrap.</param>
            <param name="kind">One of the DateTimeKind values that indicates whether year, month, day, hour, minute, second, and millisecond specify a local time, Coordinated Universal Time (UTC), or neither.</param>
        </member>
        <member name="M:SystemWrapper.DateTimeWrap.Add(System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.DateTimeWrap.AddDays(System.Double)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.DateTimeWrap.AddHours(System.Double)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.DateTimeWrap.AddMilliseconds(System.Double)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.DateTimeWrap.AddMinutes(System.Double)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.DateTimeWrap.AddMonths(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.DateTimeWrap.AddSeconds(System.Double)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.DateTimeWrap.AddTicks(System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.DateTimeWrap.AddYears(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.DateTimeWrap.Compare(SystemInterface.IDateTime,SystemInterface.IDateTime)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.DateTimeWrap.CompareTo(SystemInterface.IDateTime)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.DateTimeWrap.CompareTo(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.DateTimeWrap.DaysInMonth(System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.DateTimeWrap.Equals(SystemInterface.IDateTime)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.DateTimeWrap.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.DateTimeWrap.Equals(SystemInterface.IDateTime,SystemInterface.IDateTime)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.DateTimeWrap.FromBinary(System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.DateTimeWrap.FromFileTime(System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.DateTimeWrap.FromFileTimeUtc(System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.DateTimeWrap.FromOADate(System.Double)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.DateTimeWrap.GetDateTimeFormats">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.DateTimeWrap.GetDateTimeFormats(System.Char)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.DateTimeWrap.GetDateTimeFormats(System.IFormatProvider)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.DateTimeWrap.GetDateTimeFormats(System.Char,System.IFormatProvider)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.DateTimeWrap.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.DateTimeWrap.GetTypeCode">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.DateTimeWrap.IsDaylightSavingTime">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.DateTimeWrap.IsLeapYear(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.DateTimeWrap.Parse(System.String)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.DateTimeWrap.Parse(System.String,System.IFormatProvider)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.DateTimeWrap.Parse(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.DateTimeWrap.ParseExact(System.String,System.String,System.IFormatProvider)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.DateTimeWrap.ParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.DateTimeWrap.ParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.DateTimeWrap.SpecifyKind(SystemInterface.IDateTime,System.DateTimeKind)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.DateTimeWrap.Subtract(SystemInterface.IDateTime)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.DateTimeWrap.Subtract(System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.DateTimeWrap.ToBinary">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.DateTimeWrap.ToFileTime">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.DateTimeWrap.ToFileTimeUtc">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.DateTimeWrap.ToLocalTime">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.DateTimeWrap.ToLongDateString">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.DateTimeWrap.ToLongTimeString">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.DateTimeWrap.ToOADate">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.DateTimeWrap.ToShortDateString">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.DateTimeWrap.ToShortTimeString">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.DateTimeWrap.ToString">
            <summary>
            Converts the value of the current IDateTimeWrap object to its equivalent string representation.
            </summary>
            <returns>A string representation of the value of the current IDateTimeWrap object.</returns>
        </member>
        <member name="M:SystemWrapper.DateTimeWrap.ToString(System.IFormatProvider)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.DateTimeWrap.ToString(System.String)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.DateTimeWrap.ToString(System.String,System.IFormatProvider)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.DateTimeWrap.ToUniversalTime">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.DateTimeWrap.TryParse(System.String,SystemInterface.IDateTime@)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.DateTimeWrap.TryParse(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,SystemInterface.IDateTime@)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.DateTimeWrap.TryParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles,SystemInterface.IDateTime@)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.DateTimeWrap.TryParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles,SystemInterface.IDateTime@)">
            <inheritdoc />
        </member>
        <member name="P:SystemWrapper.DateTimeWrap.Date">
            <inheritdoc />
        </member>
        <member name="P:SystemWrapper.DateTimeWrap.DateTimeInstance">
            <inheritdoc />
        </member>
        <member name="P:SystemWrapper.DateTimeWrap.Day">
            <inheritdoc />
        </member>
        <member name="P:SystemWrapper.DateTimeWrap.DayOfWeek">
            <inheritdoc />
        </member>
        <member name="P:SystemWrapper.DateTimeWrap.DayOfYear">
            <inheritdoc />
        </member>
        <member name="P:SystemWrapper.DateTimeWrap.Hour">
            <inheritdoc />
        </member>
        <member name="P:SystemWrapper.DateTimeWrap.Kind">
            <inheritdoc />
        </member>
        <member name="P:SystemWrapper.DateTimeWrap.Millisecond">
            <inheritdoc />
        </member>
        <member name="P:SystemWrapper.DateTimeWrap.Minute">
            <inheritdoc />
        </member>
        <member name="P:SystemWrapper.DateTimeWrap.Month">
            <inheritdoc />
        </member>
        <member name="P:SystemWrapper.DateTimeWrap.Now">
            <inheritdoc />
        </member>
        <member name="P:SystemWrapper.DateTimeWrap.Second">
            <inheritdoc />
        </member>
        <member name="P:SystemWrapper.DateTimeWrap.Ticks">
            <inheritdoc />
        </member>
        <member name="P:SystemWrapper.DateTimeWrap.TimeOfDay">
            <inheritdoc />
        </member>
        <member name="P:SystemWrapper.DateTimeWrap.Today">
            <inheritdoc />
        </member>
        <member name="P:SystemWrapper.DateTimeWrap.UtcNow">
            <inheritdoc />
        </member>
        <member name="P:SystemWrapper.DateTimeWrap.Year">
            <inheritdoc />
        </member>
        <member name="T:SystemWrapper.ConsoleWrap">
            <summary>
            Wrapper for <see cref="T:System.Console"/> class.
            </summary>
        </member>
        <member name="M:SystemWrapper.ConsoleWrap.ResetColor">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.ConsoleWrap.SetOut(System.IO.TextWriter)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.ConsoleWrap.Write(System.Char)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.ConsoleWrap.Write(System.String)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.ConsoleWrap.WriteLine">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.ConsoleWrap.WriteLine(System.String)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.ConsoleWrap.WriteLine(System.String,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.ConsoleWrap.WriteLine(System.String,System.Object[])">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.ConsoleWrap.WriteLine(System.String,System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.ConsoleWrap.WriteLine(System.String,System.Object,System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="P:SystemWrapper.ConsoleWrap.ForegroundColor">
            <inheritdoc />
        </member>
        <member name="P:SystemWrapper.ConsoleWrap.Out">
            <inheritdoc />
        </member>
        <member name="T:SystemWrapper.IO.BinaryWriterWrap">
            <summary>
            Wrapper for <see cref="T:System.IO.BinaryWriter"/> class.
            </summary>
        </member>
        <member name="M:SystemWrapper.IO.BinaryWriterWrap.#ctor(System.IO.BinaryWriter)">
            <summary>
            Initializes a new instance of the <see cref="T:SystemWrapper.IO.BinaryWriterWrap"/> class on the specified path. 
            </summary>
            <param name="writer">The <see cref="T:System.IO.BinaryWriter"/> object.</param>
        </member>
        <member name="M:SystemWrapper.IO.BinaryWriterWrap.Initialize(System.IO.BinaryWriter)">
            <summary>
            Initializes a new instance of the <see cref="T:SystemWrapper.IO.BinaryWriterWrap"/> class on the specified path. 
            </summary>
            <param name="writer">The <see cref="T:System.IO.BinaryWriter"/> object.</param>
        </member>
        <member name="M:SystemWrapper.IO.BinaryWriterWrap.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the BinaryWriterWrap class based on the supplied stream and using UTF-8 as the encoding for strings.
            </summary>
            <param name="output">The output stream.</param>
        </member>
        <member name="M:SystemWrapper.IO.BinaryWriterWrap.Initialize(System.IO.Stream)">
            <summary>
            Initializes a new instance of the BinaryWriterWrap class based on the supplied stream and using UTF-8 as the encoding for strings.
            </summary>
            <param name="output">The output stream.</param>
        </member>
        <member name="M:SystemWrapper.IO.BinaryWriterWrap.#ctor(SystemInterface.IO.IStream)">
            <summary>
            Initializes a new instance of the BinaryWriterWrap class based on the supplied stream and using UTF-8 as the encoding for strings.
            </summary>
            <param name="output">The output stream.</param>
        </member>
        <member name="M:SystemWrapper.IO.BinaryWriterWrap.Initialize(SystemInterface.IO.IStream)">
            <summary>
            Initializes a new instance of the BinaryWriterWrap class based on the supplied stream and using UTF-8 as the encoding for strings.
            </summary>
            <param name="output">The output stream.</param>
        </member>
        <member name="M:SystemWrapper.IO.BinaryWriterWrap.#ctor(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Initializes a new instance of the BinaryWriterWrap class based on the supplied stream and a specific character encoding.
            </summary>
            <param name="output">The supplied stream.</param>
            <param name="encoding">The character encoding.</param>
        </member>
        <member name="M:SystemWrapper.IO.BinaryWriterWrap.Initialize(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Initializes a new instance of the BinaryWriterWrap class based on the supplied stream and a specific character encoding.
            </summary>
            <param name="output">The supplied stream.</param>
            <param name="encoding">The character encoding.</param>
        </member>
        <member name="M:SystemWrapper.IO.BinaryWriterWrap.#ctor(SystemInterface.IO.IStream,System.Text.Encoding)">
            <summary>
            Initializes a new instance of the BinaryWriterWrap class based on the supplied stream and a specific character encoding.
            </summary>
            <param name="output">The supplied stream.</param>
            <param name="encoding">The character encoding.</param>
        </member>
        <member name="M:SystemWrapper.IO.BinaryWriterWrap.Initialize(SystemInterface.IO.IStream,System.Text.Encoding)">
            <summary>
            Initializes a new instance of the BinaryWriterWrap class based on the supplied stream and a specific character encoding.
            </summary>
            <param name="output">The supplied stream.</param>
            <param name="encoding">The character encoding.</param>
        </member>
        <member name="M:SystemWrapper.IO.BinaryWriterWrap.Close">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.BinaryWriterWrap.Flush">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.BinaryWriterWrap.Seek(System.Int32,System.IO.SeekOrigin)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.BinaryWriterWrap.Write(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.BinaryWriterWrap.Write(System.Byte)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.BinaryWriterWrap.Write(System.Byte[])">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.BinaryWriterWrap.Write(System.Char)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.BinaryWriterWrap.Write(System.Char[])">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.BinaryWriterWrap.Write(System.Decimal)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.BinaryWriterWrap.Write(System.Double)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.BinaryWriterWrap.Write(System.Int16)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.BinaryWriterWrap.Write(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.BinaryWriterWrap.Write(System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.BinaryWriterWrap.Write(System.SByte)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.BinaryWriterWrap.Write(System.Single)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.BinaryWriterWrap.Write(System.String)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.BinaryWriterWrap.Write(System.UInt16)">
            <inheritdoc />        
        </member>
        <member name="M:SystemWrapper.IO.BinaryWriterWrap.Write(System.UInt32)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.BinaryWriterWrap.Write(System.UInt64)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.BinaryWriterWrap.Write(System.Byte[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.BinaryWriterWrap.Write(System.Char[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.BinaryWriterWrap.Dispose">
            <inheritdoc />
        </member>
        <member name="P:SystemWrapper.IO.BinaryWriterWrap.BaseStream">
            <inheritdoc />
        </member>
        <member name="P:SystemWrapper.IO.BinaryWriterWrap.BinaryWriterInstance">
            <inheritdoc />
        </member>
        <member name="T:SystemWrapper.Data.SqlClient.SqlDataReaderWrap">
            <summary>
            Wrapper for <see cref="T:System.Data.SqlClient.SqlDataReader"/> class.
            </summary>
        </member>
        <member name="M:SystemWrapper.Data.SqlClient.SqlDataReaderWrap.#ctor">
            <summary>
            Initializes a new instance of the SqlDataReaderWrap class (requires a subsequent call to Initialize). 
            </summary>
        </member>
        <member name="M:SystemWrapper.Data.SqlClient.SqlDataReaderWrap.#ctor(System.Data.SqlClient.SqlDataReader)">
            <summary>
            Initializes a new instance of the SqlDataReaderWrap class. 
            </summary>
            <param name="dataReader">SqlDataReader object.</param>
        </member>
        <member name="M:SystemWrapper.Data.SqlClient.SqlDataReaderWrap.Initialize(System.Data.SqlClient.SqlDataReader)">
            <summary>
            Initializes a new instance of the SqlDataReaderWrap class. 
            </summary>
            <param name="dataReader">SqlDataReader object.</param>
        </member>
        <member name="M:SystemWrapper.Data.SqlClient.SqlDataReaderWrap.Close">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.Data.SqlClient.SqlDataReaderWrap.Read">
            <inheritdoc />
        </member>
        <member name="P:SystemWrapper.Data.SqlClient.SqlDataReaderWrap.SystemInterface#Data#SqlClient#ISqlDataReader#Item(System.Int32)">
            <inheritdoc />
        </member>
        <member name="P:SystemWrapper.Data.SqlClient.SqlDataReaderWrap.SystemInterface#Data#SqlClient#ISqlDataReader#Item(System.String)">
            <inheritdoc />
        </member>
        <member name="P:SystemWrapper.Data.SqlClient.SqlDataReaderWrap.SqlDataReaderInstance">
            <inheritdoc />
        </member>
        <member name="T:SystemWrapper.Microsoft.Win32.RegistryWrap">
            <summary>
            Wrapper for <see cref="T:Microsoft.Win32.Registry"/> class.
            </summary>    
        </member>
        <member name="M:SystemWrapper.Microsoft.Win32.RegistryWrap.GetValue(System.String,System.String,System.Object)">
            <summary>
            TODO: Add Comment
            </summary>
            <param name="keyName"></param>
            <param name="valueName"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:SystemWrapper.Microsoft.Win32.RegistryWrap.SetValue(System.String,System.String,System.Object)">
            <summary>
            TODO: Add Comment
            </summary>
            <param name="keyName"></param>
            <param name="valueName"></param>
            <param name="value"></param>
        </member>
        <member name="M:SystemWrapper.Microsoft.Win32.RegistryWrap.SetValue(System.String,System.String,System.Object,Microsoft.Win32.RegistryValueKind)">
            <summary>
            TODO: Add Comment
            </summary>
            <param name="keyName"></param>
            <param name="valueName"></param>
            <param name="value"></param>
            <param name="valueKind"></param>
        </member>
        <member name="P:SystemWrapper.Microsoft.Win32.RegistryWrap.ClassesRoot">
            <summary>
            TODO: Add Comment
            </summary>
        </member>
        <member name="P:SystemWrapper.Microsoft.Win32.RegistryWrap.CurrentConfig">
            <summary>
            TODO: Add Comment
            </summary>
        </member>
        <member name="P:SystemWrapper.Microsoft.Win32.RegistryWrap.CurrentUser">
            <summary>
            TODO: Add Comment
            </summary>
        </member>
        <member name="P:SystemWrapper.Microsoft.Win32.RegistryWrap.LocalMachine">
            <summary>
            TODO: Add Comment
            </summary>
        </member>
        <member name="P:SystemWrapper.Microsoft.Win32.RegistryWrap.PerformanceData">
            <summary>
            TODO: Add Comment
            </summary>
        </member>
        <member name="P:SystemWrapper.Microsoft.Win32.RegistryWrap.Users">
            <summary>
            TODO: Add Comment
            </summary>
        </member>
        <member name="T:SystemWrapper.Microsoft.Win32.RegistryKeyWrap">
            <summary>
            
            </summary>
        </member>
        <member name="M:SystemWrapper.Microsoft.Win32.RegistryKeyWrap.Dispose">
            <summary>
            Implementation of the Dispose
            </summary>
        </member>
        <member name="M:SystemWrapper.Microsoft.Win32.RegistryKeyWrap.#ctor(Microsoft.Win32.RegistryKey)">
            <summary>
            Initializes a new instance of the <see cref="T:SystemWrapper.Microsoft.Win32.RegistryKeyWrap"/> class. 
            </summary>
            <param name="registryKey"></param>
        </member>
        <member name="M:SystemWrapper.Microsoft.Win32.RegistryKeyWrap.Initialize(Microsoft.Win32.RegistryKey)">
            <summary>
            Initiatlized the RegistryKey instance
            </summary>
            <param name="registryKey"></param>
        </member>
        <member name="M:SystemWrapper.Microsoft.Win32.RegistryKeyWrap.Close">
            <summary>
            TODO: Add Comment
            </summary>
        </member>
        <member name="M:SystemWrapper.Microsoft.Win32.RegistryKeyWrap.CreateSubKey(System.String)">
            <summary>
            TODO: Add Comment
            </summary>
            <param name="subkey"></param>
            <returns></returns>
        </member>
        <member name="M:SystemWrapper.Microsoft.Win32.RegistryKeyWrap.CreateSubKey(System.String,Microsoft.Win32.RegistryKeyPermissionCheck)">
            <summary>
            TODO: Add Comment
            </summary>
            <param name="subkey"></param>
            <param name="permissionCheck"></param>
            <returns></returns>
        </member>
        <member name="M:SystemWrapper.Microsoft.Win32.RegistryKeyWrap.CreateSubKey(System.String,Microsoft.Win32.RegistryKeyPermissionCheck,Microsoft.Win32.RegistryOptions)">
            <summary>
            TODO: Add Comment
            </summary>
            <param name="subkey"></param>
            <param name="permissionCheck"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:SystemWrapper.Microsoft.Win32.RegistryKeyWrap.CreateSubKey(System.String,Microsoft.Win32.RegistryKeyPermissionCheck,SystemInterface.Security.AccessControl.IRegistrySecurity)">
            <summary>
            TODO: Add Comment
            </summary>
            <param name="subkey"></param>
            <param name="permissionCheck"></param>
            <param name="registrySecurity"></param>
            <returns></returns>
        </member>
        <member name="M:SystemWrapper.Microsoft.Win32.RegistryKeyWrap.CreateSubKey(System.String,Microsoft.Win32.RegistryKeyPermissionCheck,Microsoft.Win32.RegistryOptions,SystemInterface.Security.AccessControl.IRegistrySecurity)">
            <summary>
            TODO: Add Comment
            </summary>
            <param name="subkey"></param>
            <param name="permissionCheck"></param>
            <param name="registryOptions"></param>
            <param name="registrySecurity"></param>
            <returns></returns>
        </member>
        <member name="M:SystemWrapper.Microsoft.Win32.RegistryKeyWrap.DeleteSubKey(System.String)">
            <summary>
            TODO: Add Comment
            </summary>
            <param name="subkey"></param>
        </member>
        <member name="M:SystemWrapper.Microsoft.Win32.RegistryKeyWrap.DeleteSubKey(System.String,System.Boolean)">
            <summary>
            TODO: Add Comment
            </summary>
            <param name="subkey"></param>
            <param name="throwOnMissingSubKey"></param>
        </member>
        <member name="M:SystemWrapper.Microsoft.Win32.RegistryKeyWrap.DeleteSubKeyTree(System.String)">
            <summary>
            TODO: Add Comment
            </summary>
            <param name="subkey"></param>
        </member>
        <member name="M:SystemWrapper.Microsoft.Win32.RegistryKeyWrap.DeleteSubKeyTree(System.String,System.Boolean)">
            <summary>
            TODO: Add Comment
            </summary>
            <param name="subkey"></param>
            <param name="throwOnMissingSubKey"></param>
        </member>
        <member name="M:SystemWrapper.Microsoft.Win32.RegistryKeyWrap.DeleteValue(System.String)">
            <summary>
            TODO: Add Comment
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:SystemWrapper.Microsoft.Win32.RegistryKeyWrap.DeleteValue(System.String,System.Boolean)">
            <summary>
            TODO: Add Comment
            </summary>
            <param name="name"></param>
            <param name="throwOnMissingValue"></param>
        </member>
        <member name="M:SystemWrapper.Microsoft.Win32.RegistryKeyWrap.Flush">
            <summary>
            TODO: Add Comment
            </summary>
        </member>
        <member name="M:SystemWrapper.Microsoft.Win32.RegistryKeyWrap.FromHandle(SystemInterface.Microsoft.Win32.SafeHandles.ISafeRegistryHandle)">
            <summary>
            TODO: Add Comment
            </summary>
            <param name="handle"></param>
            <returns></returns>
        </member>
        <member name="M:SystemWrapper.Microsoft.Win32.RegistryKeyWrap.FromHandle(SystemInterface.Microsoft.Win32.SafeHandles.ISafeRegistryHandle,Microsoft.Win32.RegistryView)">
            <summary>
            TODO: Add Comment
            </summary>
            <param name="handle"></param>
            <param name="view"></param>
            <returns></returns>
        </member>
        <member name="M:SystemWrapper.Microsoft.Win32.RegistryKeyWrap.GetAccessControl">
            <summary>
            TODO: Add Comment
            </summary>
            <returns></returns>
        </member>
        <member name="M:SystemWrapper.Microsoft.Win32.RegistryKeyWrap.GetAccessControl(System.Security.AccessControl.AccessControlSections)">
            <summary>
            TODO: Add Comment
            </summary>
            <param name="includeSections"></param>
            <returns></returns>
        </member>
        <member name="M:SystemWrapper.Microsoft.Win32.RegistryKeyWrap.GetSubKeyNames">
            <summary>
            TODO: Add Comment
            </summary>
            <returns></returns>
        </member>
        <member name="M:SystemWrapper.Microsoft.Win32.RegistryKeyWrap.GetValue(System.String)">
            <summary>
            TODO: Add Comment
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:SystemWrapper.Microsoft.Win32.RegistryKeyWrap.GetValue(System.String,System.Object)">
            <summary>
            TODO: Add Comment
            </summary>
            <param name="name"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:SystemWrapper.Microsoft.Win32.RegistryKeyWrap.GetValue(System.String,System.Object,Microsoft.Win32.RegistryValueOptions)">
            <summary>
            TODO: Add Comment
            </summary>
            <param name="name"></param>
            <param name="defaultValue"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:SystemWrapper.Microsoft.Win32.RegistryKeyWrap.GetValueKind(System.String)">
            <summary>
            TODO: Add Comment
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:SystemWrapper.Microsoft.Win32.RegistryKeyWrap.GetValueNames">
            <summary>
            TODO: Add Comment
            </summary>
            <returns></returns>
        </member>
        <member name="M:SystemWrapper.Microsoft.Win32.RegistryKeyWrap.OpenBaseKey(Microsoft.Win32.RegistryHive,Microsoft.Win32.RegistryView)">
            <summary>
            TODO: Add Comment
            </summary>
            <param name="hKey"></param>
            <param name="view"></param>
            <returns></returns>
        </member>
        <member name="M:SystemWrapper.Microsoft.Win32.RegistryKeyWrap.OpenRemoteBaseKey(Microsoft.Win32.RegistryHive,System.String)">
            <summary>
            TODO: Add Comment
            </summary>
            <param name="hKey"></param>
            <param name="machineName"></param>
            <returns></returns>
        </member>
        <member name="M:SystemWrapper.Microsoft.Win32.RegistryKeyWrap.OpenRemoteBaseKey(Microsoft.Win32.RegistryHive,System.String,Microsoft.Win32.RegistryView)">
            <summary>
            TODO: Add Comment
            </summary>
            <param name="hKey"></param>
            <param name="machineName"></param>
            <param name="view"></param>
            <returns></returns>
        </member>
        <member name="M:SystemWrapper.Microsoft.Win32.RegistryKeyWrap.OpenSubKey(System.String)">
            <summary>
            TODO: Add Comment
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:SystemWrapper.Microsoft.Win32.RegistryKeyWrap.OpenSubKey(System.String,Microsoft.Win32.RegistryKeyPermissionCheck)">
            <summary>
            TODO: Add Comment
            </summary>
            <param name="name"></param>
            <param name="permissionCheck"></param>
            <returns></returns>
        </member>
        <member name="M:SystemWrapper.Microsoft.Win32.RegistryKeyWrap.OpenSubKey(System.String,System.Boolean)">
            <summary>
            TODO: Add Comment
            </summary>
            <param name="name"></param>
            <param name="writable"></param>
            <returns></returns>
        </member>
        <member name="M:SystemWrapper.Microsoft.Win32.RegistryKeyWrap.OpenSubKey(System.String,Microsoft.Win32.RegistryKeyPermissionCheck,System.Security.AccessControl.RegistryRights)">
            <summary>
            TODO: Add Comment
            </summary>
            <param name="name"></param>
            <param name="permissionCheck"></param>
            <param name="rights"></param>
            <returns></returns>
        </member>
        <member name="M:SystemWrapper.Microsoft.Win32.RegistryKeyWrap.SetAccessControl(SystemInterface.Security.AccessControl.IRegistrySecurity)">
            <summary>
            TODO: Add Comment
            </summary>
            <param name="registrySecurity"></param>
        </member>
        <member name="M:SystemWrapper.Microsoft.Win32.RegistryKeyWrap.SetValue(System.String,System.Object)">
            <summary>
            TODO: Add Comment
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:SystemWrapper.Microsoft.Win32.RegistryKeyWrap.SetValue(System.String,System.Object,Microsoft.Win32.RegistryValueKind)">
            <summary>
            TODO: Add Comment
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <param name="valueKind"></param>
        </member>
        <member name="P:SystemWrapper.Microsoft.Win32.RegistryKeyWrap.RegistryKeyInstance">
            <summary>
            Gets <see cref="T:Microsoft.Win32.RegistryKey"/> object.
            </summary>
        </member>
        <member name="P:SystemWrapper.Microsoft.Win32.RegistryKeyWrap.Handle">
            <summary>
            
            </summary>
        </member>
        <member name="P:SystemWrapper.Microsoft.Win32.RegistryKeyWrap.Name">
            <summary>
            TODO: Add Comment
            </summary>
        </member>
        <member name="P:SystemWrapper.Microsoft.Win32.RegistryKeyWrap.SubKeyCount">
            <summary>
            TODO: Add Comment
            </summary>
        </member>
        <member name="P:SystemWrapper.Microsoft.Win32.RegistryKeyWrap.ValueCount">
            <summary>
            TODO: Add Comment
            </summary>
        </member>
        <member name="P:SystemWrapper.Microsoft.Win32.RegistryKeyWrap.View">
            <summary>
            TODO: Add Comment
            </summary>
        </member>
        <member name="T:SystemWrapper.IO.StreamWriterWrap">
            <summary>
            Wrapper for <see cref="T:System.IO.StreamWriter"/> class.
            </summary>
        </member>
        <member name="M:SystemWrapper.IO.StreamWriterWrap.#ctor(System.IO.StreamWriter)">
            <summary>
            Initializes a new instance of the <see cref="T:SystemWrapper.IO.StreamWriterWrap"/> class on the specified path. 
            </summary>
            <param name="streamWriter">A <see cref="T:System.IO.StreamWriter"/> object.</param>
        </member>
        <member name="M:SystemWrapper.IO.StreamWriterWrap.Initialize(System.IO.StreamWriter)">
            <summary>
            Initializes a new instance of the <see cref="T:SystemWrapper.IO.StreamWriterWrap"/> class on the specified path. 
            </summary>
            <param name="streamWriter">A <see cref="T:System.IO.StreamWriter"/> object.</param>
        </member>
        <member name="M:SystemWrapper.IO.StreamWriterWrap.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:SystemWrapper.IO.StreamWriterWrap"/> class for the specified stream, using UTF-8 encoding and the default buffer size.
            </summary>
            <param name="stream">The stream to write to.</param>
        </member>
        <member name="M:SystemWrapper.IO.StreamWriterWrap.Initialize(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:SystemWrapper.IO.StreamWriterWrap"/> class for the specified stream, using UTF-8 encoding and the default buffer size.
            </summary>
            <param name="stream">The stream to write to.</param>
        </member>
        <member name="M:SystemWrapper.IO.StreamWriterWrap.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SystemWrapper.IO.StreamWriterWrap"/> class for the specified stream, using UTF-8 encoding and the default buffer size.
            </summary>
            <param name="path">The complete file path to write to. path can be a file name.</param>
        </member>
        <member name="M:SystemWrapper.IO.StreamWriterWrap.Initialize(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SystemWrapper.IO.StreamWriterWrap"/> class for the specified stream, using UTF-8 encoding and the default buffer size.
            </summary>
            <param name="path">The complete file path to write to. path can be a file name.</param>
        </member>
        <member name="M:SystemWrapper.IO.StreamWriterWrap.#ctor(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Initializes a new instance of the <see cref="T:SystemWrapper.IO.StreamWriterWrap"/> class for the specified stream, using the specified encoding and the default buffer size. 
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="encoding">The character encoding to use.</param>
        </member>
        <member name="M:SystemWrapper.IO.StreamWriterWrap.Initialize(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Initializes a new instance of the <see cref="T:SystemWrapper.IO.StreamWriterWrap"/> class for the specified stream, using the specified encoding and the default buffer size. 
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="encoding">The character encoding to use.</param>
        </member>
        <member name="M:SystemWrapper.IO.StreamWriterWrap.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the StreamWriter class for the specified file on the specified path, using the default encoding and buffer size. If the file exists, it can be either overwritten or appended to. If the file does not exist, this constructor creates a new file.
            </summary>
            <param name="path">The complete file path to write to.</param>
            <param name="append">Determines whether data is to be appended to the file. If the file exists and append is false, the file is overwritten. If the file exists and append is true, the data is appended to the file. Otherwise, a new file is created.</param>
        </member>
        <member name="M:SystemWrapper.IO.StreamWriterWrap.Initialize(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the StreamWriter class for the specified file on the specified path, using the default encoding and buffer size. If the file exists, it can be either overwritten or appended to. If the file does not exist, this constructor creates a new file.
            </summary>
            <param name="path">The complete file path to write to.</param>
            <param name="append">Determines whether data is to be appended to the file. If the file exists and append is false, the file is overwritten. If the file exists and append is true, the data is appended to the file. Otherwise, a new file is created.</param>
        </member>
        <member name="M:SystemWrapper.IO.StreamWriterWrap.#ctor(System.IO.Stream,System.Text.Encoding,System.Int32)">
            <summary>
            Initializes a new instance of the StreamWriter class for the specified stream, using the specified encoding and buffer size. 
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="encoding">The character encoding to use.</param>
            <param name="bufferSize">Sets the buffer size.</param>
        </member>
        <member name="M:SystemWrapper.IO.StreamWriterWrap.Initialize(System.IO.Stream,System.Text.Encoding,System.Int32)">
            <summary>
            Initializes a new instance of the StreamWriter class for the specified stream, using the specified encoding and buffer size. 
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="encoding">The character encoding to use.</param>
            <param name="bufferSize">Sets the buffer size.</param>
        </member>
        <member name="M:SystemWrapper.IO.StreamWriterWrap.#ctor(System.String,System.Boolean,System.Text.Encoding)">
            <summary>
            Initializes a new instance of the StreamWriter class for the specified file on the specified path, using the specified encoding and default buffer size. If the file exists, it can be either overwritten or appended to. If the file does not exist, this constructor creates a new file.
            </summary>
            <param name="path">The complete file path to write to.</param>
            <param name="append">Determines whether data is to be appended to the file. If the file exists and append is false, the file is overwritten. If the file exists and append is true, the data is appended to the file. Otherwise, a new file is created.</param>
            <param name="encoding">The character encoding to use.</param>
        </member>
        <member name="M:SystemWrapper.IO.StreamWriterWrap.Initialize(System.String,System.Boolean,System.Text.Encoding)">
            <summary>
            Initializes a new instance of the StreamWriter class for the specified file on the specified path, using the specified encoding and default buffer size. If the file exists, it can be either overwritten or appended to. If the file does not exist, this constructor creates a new file.
            </summary>
            <param name="path">The complete file path to write to.</param>
            <param name="append">Determines whether data is to be appended to the file. If the file exists and append is false, the file is overwritten. If the file exists and append is true, the data is appended to the file. Otherwise, a new file is created.</param>
            <param name="encoding">The character encoding to use.</param>
        </member>
        <member name="M:SystemWrapper.IO.StreamWriterWrap.#ctor(System.String,System.Boolean,System.Text.Encoding,System.Int32)">
            <summary>
            Initializes a new instance of the StreamWriter class for the specified file on the specified path, using the specified encoding and buffer size. If the file exists, it can be either overwritten or appended to. If the file does not exist, this constructor creates a new file.
            </summary>
            <param name="path">The complete file path to write to.</param>
            <param name="append">Determines whether data is to be appended to the file. If the file exists and append is false, the file is overwritten. If the file exists and append is true, the data is appended to the file. Otherwise, a new file is created.</param>
            <param name="encoding">The character encoding to use.</param>
            <param name="bufferSize">Sets the buffer size.</param>
        </member>
        <member name="M:SystemWrapper.IO.StreamWriterWrap.Initialize(System.String,System.Boolean,System.Text.Encoding,System.Int32)">
            <summary>
            Initializes a new instance of the StreamWriter class for the specified file on the specified path, using the specified encoding and buffer size. If the file exists, it can be either overwritten or appended to. If the file does not exist, this constructor creates a new file.
            </summary>
            <param name="path">The complete file path to write to.</param>
            <param name="append">Determines whether data is to be appended to the file. If the file exists and append is false, the file is overwritten. If the file exists and append is true, the data is appended to the file. Otherwise, a new file is created.</param>
            <param name="encoding">The character encoding to use.</param>
            <param name="bufferSize">Sets the buffer size.</param>
        </member>
        <member name="M:SystemWrapper.IO.StreamWriterWrap.Close">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.StreamWriterWrap.Flush">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.StreamWriterWrap.Write(System.Char)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.StreamWriterWrap.Write(System.Char[])">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.StreamWriterWrap.Write(System.String)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.IO.StreamWriterWrap.Write(System.Char[],System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="P:SystemWrapper.IO.StreamWriterWrap.AutoFlush">
            <inheritdoc />
        </member>
        <member name="P:SystemWrapper.IO.StreamWriterWrap.BaseStream">
            <inheritdoc />
        </member>
        <member name="P:SystemWrapper.IO.StreamWriterWrap.Encoding">
            <inheritdoc />
        </member>
        <member name="P:SystemWrapper.IO.StreamWriterWrap.StreamWriterInstance">
            <inheritdoc />
        </member>
        <member name="T:SystemWrapper.Data.SqlClient.SqlCommandWrap">
            <summary>
            Wrapper for <see cref="T:System.Data.SqlClient.SqlCommand"/> class.
            </summary>
        </member>
        <member name="M:SystemWrapper.Data.SqlClient.SqlCommandWrap.#ctor">
            <summary>
            Initializes a new instance of the SqlCommandWrap class. 
            </summary>
        </member>
        <member name="M:SystemWrapper.Data.SqlClient.SqlCommandWrap.Initialize">
            <summary>
            Initializes a new instance of the SqlCommandWrap class. 
            </summary>
        </member>
        <member name="M:SystemWrapper.Data.SqlClient.SqlCommandWrap.#ctor(System.Data.SqlClient.SqlCommand)">
            <summary>
            Initializes a new instance of the SqlCommandWrap class. 
            </summary>
            <param name="command">SqlCommand object.</param>
        </member>
        <member name="M:SystemWrapper.Data.SqlClient.SqlCommandWrap.Initialize(System.Data.SqlClient.SqlCommand)">
            <summary>
            Initializes a new instance of the SqlCommandWrap class. 
            </summary>
            <param name="command">SqlCommand object.</param>
        </member>
        <member name="M:SystemWrapper.Data.SqlClient.SqlCommandWrap.#ctor(System.String)">
            <summary>
            Initializes a new instance of the SqlCommandWrap class with the text of the query.
            </summary>
            <param name="cmdText">The text of the query.</param>
        </member>
        <member name="M:SystemWrapper.Data.SqlClient.SqlCommandWrap.Initialize(System.String)">
            <summary>
            Initializes a new instance of the SqlCommandWrap class with the text of the query.
            </summary>
            <param name="cmdText">The text of the query.</param>
        </member>
        <member name="M:SystemWrapper.Data.SqlClient.SqlCommandWrap.#ctor(System.String,SystemInterface.Data.SqlClient.ISqlConnection)">
            <summary>
            Initializes a new instance of the SqlCommandWrap class with the text of the query and a ISqlConnectionWrap. 
            </summary>
            <param name="cmdText">The text of the query.</param>
            <param name="connection">A ISqlConnectionWrap that represents the connection to an instance of SQL Server.</param>
        </member>
        <member name="M:SystemWrapper.Data.SqlClient.SqlCommandWrap.Initialize(System.String,SystemInterface.Data.SqlClient.ISqlConnection)">
            <summary>
            Initializes a new instance of the SqlCommandWrap class with the text of the query and a ISqlConnectionWrap. 
            </summary>
            <param name="cmdText">The text of the query.</param>
            <param name="connection">A ISqlConnectionWrap that represents the connection to an instance of SQL Server.</param>
        </member>
        <member name="M:SystemWrapper.Data.SqlClient.SqlCommandWrap.ExecuteReader">
            <inheritdoc />
        </member>
        <member name="P:SystemWrapper.Data.SqlClient.SqlCommandWrap.SqlCommandInstance">
            <inheritdoc />
        </member>
        <member name="T:SystemWrapper.AppDomainWrap">
            <summary>
            Wrapper for <see cref="T:System.AppDomain"/> class.
            </summary>
        </member>
        <member name="M:SystemWrapper.AppDomainWrap.#ctor(System.AppDomain)">
            <summary>
            Initializes a new instance of the <see cref="T:SystemWrapper.AppDomainWrap"/> class. 
            </summary>
            <param name="appDomain">AppDomain object.</param>
        </member>
        <member name="M:SystemWrapper.AppDomainWrap.Initialize(System.AppDomain)">
            <summary>
            Initializes a new instance of the <see cref="T:SystemWrapper.AppDomainWrap"/> class. 
            </summary>
            <param name="appDomain">AppDomain object.</param>
        </member>
        <member name="M:SystemWrapper.AppDomainWrap.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SystemWrapper.AppDomainWrap"/> class and creates a new application domain with the specified name.
            </summary>
            <param name="friendlyName">The friendly name of the domain.</param>
        </member>
        <member name="M:SystemWrapper.AppDomainWrap.Initialize(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SystemWrapper.AppDomainWrap"/> class and creates a new application domain with the specified name.
            </summary>
            <param name="friendlyName">The friendly name of the domain.</param>
        </member>
        <member name="M:SystemWrapper.AppDomainWrap.GetData(System.String)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.AppDomainWrap.Load(SystemInterface.Reflection.IAssemblyName)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.AppDomainWrap.SetData(System.String,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.AppDomainWrap.Unload(SystemInterface.IAppDomain)">
            <inheritdoc />
        </member>
        <member name="P:SystemWrapper.AppDomainWrap.AppDomainInstance">
            <inheritdoc />
        </member>
        <member name="P:SystemWrapper.AppDomainWrap.CurrentDomain">
            <inheritdoc />
        </member>
        <member name="E:SystemWrapper.AppDomainWrap.SystemInterface#IAppDomain#AssemblyResolve">
            <inheritdoc />
        </member>
        <member name="T:SystemWrapper.Data.SqlClient.SqlConnectionWrap">
            <summary>
            Wrapper for <see cref="T:System.Data.SqlClient.SqlConnection"/> class.
            </summary>
        </member>
        <member name="M:SystemWrapper.Data.SqlClient.SqlConnectionWrap.#ctor">
            <summary>
            Initializes a new instance of the SqlConnectionWrap class. 
            </summary>
        </member>
        <member name="M:SystemWrapper.Data.SqlClient.SqlConnectionWrap.Initialize">
            <summary>
            Initializes a new instance of the SqlConnectionWrap class. 
            </summary>
        </member>
        <member name="M:SystemWrapper.Data.SqlClient.SqlConnectionWrap.#ctor(System.Data.SqlClient.SqlConnection)">
            <summary>
            Initializes a new instance of the SqlConnectionWrap class. 
            </summary>
            <param name="connection">SqlConnection object.</param>
        </member>
        <member name="M:SystemWrapper.Data.SqlClient.SqlConnectionWrap.Initialize(System.Data.SqlClient.SqlConnection)">
            <summary>
            Initializes a new instance of the SqlConnectionWrap class. 
            </summary>
            <param name="connection">SqlConnection object.</param>
        </member>
        <member name="M:SystemWrapper.Data.SqlClient.SqlConnectionWrap.#ctor(System.String)">
            <summary>
            Initializes a new instance of the SqlConnection class when given a string that contains the connection string. 
            </summary>
            <param name="connectionString">The connection used to open the SQL Server database.</param>
        </member>
        <member name="M:SystemWrapper.Data.SqlClient.SqlConnectionWrap.Initialize(System.String)">
            <summary>
            Initializes a new instance of the SqlConnection class when given a string that contains the connection string. 
            </summary>
            <param name="connectionString">The connection used to open the SQL Server database.</param>
        </member>
        <member name="M:SystemWrapper.Data.SqlClient.SqlConnectionWrap.Close">
            <inheritdoc />
        </member>
        <member name="M:SystemWrapper.Data.SqlClient.SqlConnectionWrap.Open">
            <inheritdoc />
        </member>
        <member name="P:SystemWrapper.Data.SqlClient.SqlConnectionWrap.ConnectionString">
            <inheritdoc />
        </member>
        <member name="P:SystemWrapper.Data.SqlClient.SqlConnectionWrap.ConnectionTimeout">
            <inheritdoc />
        </member>
        <member name="P:SystemWrapper.Data.SqlClient.SqlConnectionWrap.Database">
            <inheritdoc />
        </member>
        <member name="P:SystemWrapper.Data.SqlClient.SqlConnectionWrap.DataSource">
            <inheritdoc />
        </member>
        <member name="P:SystemWrapper.Data.SqlClient.SqlConnectionWrap.FireInfoMessageEventOnUserErrors">
            <inheritdoc />
        </member>
        <member name="P:SystemWrapper.Data.SqlClient.SqlConnectionWrap.PacketSize">
            <inheritdoc />
        </member>
        <member name="P:SystemWrapper.Data.SqlClient.SqlConnectionWrap.ServerVersion">
            <inheritdoc />
        </member>
        <member name="P:SystemWrapper.Data.SqlClient.SqlConnectionWrap.SqlConnectionInstance">
            <inheritdoc />
        </member>
        <member name="P:SystemWrapper.Data.SqlClient.SqlConnectionWrap.State">
            <inheritdoc />
        </member>
        <member name="P:SystemWrapper.Data.SqlClient.SqlConnectionWrap.StatisticsEnabled">
            <inheritdoc />
        </member>
        <member name="P:SystemWrapper.Data.SqlClient.SqlConnectionWrap.WorkstationId">
            <inheritdoc />
        </member>
    </members>
</doc>
